defaultStorageMapping: BI
installedPackages: {}
jobs:
  Job-1:
    excludeSelector: ""
    id: 1
    includeSelector: "+{ location: BI name: DIM_* }"
    name: Dimension Load
    steps: []
    subgraphs: []
  Job-2:
    excludeSelector: ""
    id: 2
    includeSelector: "+{ location: BI name: FCT_SALESORDER }"
    name: Fact Salesorder
    steps: []
    subgraphs: []
  Job-3:
    excludeSelector: ""
    id: 3
    includeSelector: "+{ location: BI name: FCT_PURCHASING_ORDER }"
    name: Fact Purchase Order
    steps: []
    subgraphs: []
  Job-4:
    excludeSelector: ""
    id: 4
    includeSelector: "+{ location: BI name: DIM_VENDOR }"
locations:
  ADMIN:
    mappingDefinitions:
      "16":
        database: SAP_MFG_PRODUCTION
        schema: FT_ADMIN
  BI:
    mappingDefinitions:
      "16":
        database: SAP_MFG_PRODUCTION
        schema: SAP_BI
  MKTPLC_CUR:
    mappingDefinitions:
      "16":
        database: ECONOMY_DATA_ATLAS
        schema: ECONOMY
  RAW:
    mappingDefinitions:
      "16":
        database: SAP_MFG_PRODUCTION
        schema: SAP_RAW
  RAW_NEW:
    mappingDefinitions:
      "16":
        database: SAP_MFG_PRODUCTION
        schema: SAP_RAW_SAPABAP1
  STG:
    mappingDefinitions:
      "16":
        database: SAP_MFG_PRODUCTION
        schema: SAP_STG
macros:
  Macro-1:
    id: "1"
    macroString: |-

      {%- macro sap_dateformat() -%}
      case when {{SRC}} in ('00000000', ' ') THEN NULL ELSE TO_DATE({{SRC}}) end
      {%- endmacro -%}

      {%- macro sap_simplename(col) -%}
      {{ parameters.srcMapping.tbl | selectattr('name','equalto',(sources[0].columns | selectattr('id','equalto',column.id) | map(attribute='sourceColumns') | first | map(attribute='node') | map(attribute='name') | first)) | map(attribute='columns') | first | selectattr('sapName','equalto',sources[0].columns | selectattr('id','equalto',column.id) | map(attribute='sourceColumns') | first | map(attribute='column') | map(attribute='name') | first) | map(attribute='simpleName') | first }}
      {%- endmacro -%}

      {%- macro transform_string_date(col) -%}
          {% if col.hashDetails %}
              {{ hash(col.hashDetails.columns, algo=col.hashDetails.algorithm, datatype=col.dataType) }}
          {% elif col.transform | trim != '' -%}
              {{- col.transform -}}
          {% elif col.sourceColumns[0].node and col.sourceColumns[0].node.name and col.sourceColumns[0].column and col.sourceColumns[0].column.name -%}
              "{{- col.sourceColumns[0].node.name }}"."{{ col.sourceColumns[0].column.name -}}"
          {%- else -%}
              NULL
          {% endif %}
      {%- endmacro -%}

      {#-- This macro will drop a table / view / dynamic table if it already exists as a different or the same object type #}
      {#-- Errors can occur when creating a same named object of a different type #}

      {% macro dropTblView() %}
        {%- set db = ref_no_link(node.location.name, node.name).split('.')[0]  %} 
        {%- set sch = ref_no_link(node.location.name, node.name).split('.')[1]  %} 
        {%- set obj = "{{ node.name }}"  %} 

          begin
              let db varchar := '{{db}}';
              let sch varchar := '{{sch}}';
              let obj varchar := '{{obj}}';

              begin
                  execute immediate 'drop table if exists ' || db || '.' || sch || '.' || obj;    
              exception
                  when statement_error then
                      null;
              end;

              begin
                  execute immediate 'drop view if exists ' || db || '.' || sch || '.' || obj;    
              exception
                  when statement_error then
                      null;
              end;

              begin
                  execute immediate 'drop dynamic table if exists ' || db || '.' || sch || '.' || obj;    
              exception
                  when statement_error then
                      null;
              end;

          end;
      {% endmacro %}
packages: {}
projects: {}
stepTypes:
  StepType-1:
    id: "1"
    isDisabled: false
    metadata:
      defaultStorageLocation: STG
      error: null
      nodeMetadataSpec: |
        capitalized: View
        short: V
        tagColor: '#C4C4C4'
        isDisabled: true
        plural: Views

        config:
          - groupName: Options
            items: 
            - type: materializationSelector
              options:
                - view
              default: view
              isRequired: true

            - type: toggleButton
              attributeName: selectDistinct
              displayName: Distinct

            - type: multisourceToggle

            - type: overrideSQLToggle

            - displayName: Multi Source Strategy
              attributeName: insertStrategy
              type: dropdownSelector
              default: UNION
              options:
              - "UNION"
              - "UNION ALL" 
              isRequired: true
              enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
                
                {{ node.override.create.script }}

            {% else %}
                {{ stage('Create View') }}
                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns -%}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {%- endif %}
                    {% endfor -%}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
                AS
                {% for source in sources -%}
                    SELECT {% if config.selectDistinct %} DISTINCT {% endif -%}
                    {%- for col in source.columns -%}
                        {{ get_source_transform(col) }} AS "{{ col.name -}}"
                        {%- if not loop.last -%}, {%- endif %}
                    {% endfor -%}

            {{- source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}
            {% endif %}
        run:
          templateString: ""
    name: View
    version: 1
  StepType-17:
    id: "17"
    isDisabled: false
    metadata:
      defaultStorageLocation: BI
      error: null
      nodeMetadataSpec: |-
        capitalized: Dynamic Table Star Join
        short: DTSTAR
        plural: Dynamic Table Star Join
        tagColor: brown

        config:
        - groupName: Materialization Type
          items:
          - type: dropdownSelector
            attributeName: matType
            default: dynamic table
            options:
            - dynamic table
            - view
            isRequired: true
            
          - displayName: Warehouse on which to execute Dynamic Table
            attributeName: whName
            type: textBox
            default: 'dev_xs_wh'
            isRequired: false
            enableIf: "{% if config.matType == 'dynamic table' %} true {% else %} false {% endif %}"

          - type: tabular
            displayName: 'Lag Specification'
            attributeName: lagSpecification
            columns:
          
            -  type: textBox
               displayName: Time Value
               attributeName: lagNumber
               default: 60
               isRequired: false
               enableIf: "{% if config.matType == 'dynamic table' %} true {% else %} false {% endif %}"
            
            -  type: dropdownSelector
               displayName: Time Period
               attributeName: lagType
               default: Minutes
               options:
               - Seconds
               - Minutes
               - Hours
               - Days
               isRequired: false
               enableIf: "{% if config.matType == 'dynamic table' %} true {% else %} false {% endif %}"
            
            isRequired: false
            enableIf: "{% if config.matType == 'dynamic table' %} true {% else %} false {% endif %}"
      templates:
        create:
          templateString: |-
            {# Dynamic Table Specific Options #}
            {%- if config.matType == 'dynamic table' %} 
            {% set dtLagNumber = config.lagSpecification.get('items') | map(attribute='lagNumber') | first %}
            {% set dtLagType = config.lagSpecification.get('items') | map(attribute='lagType') | first %}

            	{{ stage('Try Drop View') }}
                    {{dropTblView()}}



                {{ stage('Create Dynamic Table') }}

                    CREATE OR REPLACE DYNAMIC TABLE {{ ref_no_link(node.location.name, node.name) }}
                        LAG = '{{ dtLagNumber }} {{ dtLagType }}'
                        WAREHOUSE = {{config.whName}}
                        {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}

                    AS
                    SELECT 
                    {%- for col in sources[0].columns -%}
                        {{ get_source_transform(col) }} AS "{{ col.name -}}"
                        {%- if not loop.last -%}, {%- endif %}
                    {% endfor %}
                {{- sources[0].join }}

            {% endif %}

            {%- if config.matType == 'view' %} 

            	{{ stage('Try Drop Dynamic Table') }}
                    {{dropTblView()}}


                {{ stage('Create Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns -%}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {%- endif %}
                    {% endfor -%}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
                AS
                    SELECT 
                    {%- for col in sources[0].columns -%}
                        {{ get_source_transform(col) }} AS "{{ col.name -}}"
                        {%- if not loop.last -%}, {%- endif %}
                    {% endfor %}
                {{- sources[0].join }}

            {% endif %}
        run:
          templateString: ""
    name: Star Join Dynamic Table
    version: 1
  StepType-19:
    id: "19"
    isDisabled: true
    metadata:
      defaultStorageLocation: STG
      error: null
      nodeMetadataSpec: |-
        capitalized: Deferred Merge - Delta Stream
        short: DM_VIEW
        tagColor: black
        plural: Deferred Merge

        config:
        - groupName: Stream Options
          items:
          - displayName: Source Object
            attributeName: sourceType
            type: dropdownSelector
            default: Table
            options:
              - Table
              - External Table
              - View
            isRequired: false

          - displayName: Append Only Stream
            attributeName: appendOnly
            type: dropdownSelector
            default: "false"
            options:
              - "false"
            isRequired: true
            enableIf: "{% if config.sourceType == 'Table' or config.sourceType == 'View' %} true {% else %} false {% endif %}"

          - displayName: Show Initial Rows
            attributeName: initialRows
            type: toggleButton
            default: true
            isRequired: true
            enableIf: "{% if config.sourceType == 'Table' or config.sourceType == 'View' %} true {% else %} false {% endif %}"

          - displayName: Insert Only
            attributeName: insertOnly
            type: toggleButton
            default: false
            isRequired: true
            enableIf: "{% if config.sourceType == 'External Table' %} true {% else %} false {% endif %}"

        - groupName: Target Loading Options
          items:
          - type: tabular
            displayName: 'Table Key(s)'
            attributeName: partitionBy
            columns:
          
            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: partColName
               isRequired: true
                
            isRequired: false

          - displayName: Record Versioning
            attributeName: recordVersioning
            type: dropdownSelector
            default: Datetime Column
            options:
              - Datetime Column
              - Date Column and Time Column
              - Numeric Column
            isRequired: true

          - type: tabular
            displayName: 'Timestamp or Sequence'
            attributeName: orderBy
            columns:
          
            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: colName
               isRequired: true
               enableIf: "{% if config.recordVersioning in ('Datetime Column','Numeric Column') %} true {% else %} false {% endif %}"
            
            -  type: dropdownSelector
               displayName: Sort Order
               attributeName: sortOrd
               default: desc
               options:
               - desc
               - asc
               isRequired: true
               enableIf: "{% if config.recordVersioning in ('Datetime Column','Numeric Column') %} true {% else %} false {% endif %}"
            
            isRequired: false
            enableIf: "{% if config.recordVersioning in ('Datetime Column','Numeric Column') %} true {% else %} false {% endif %}"

          - type: tabular
            displayName: 'Date / Timestamp Columns'
            attributeName: orderByDateTime
            columns:
          
            -  type: columnDropdownSelector
               displayName: Date Column
               attributeName: colNameDate
               isRequired: true
               enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"
            
            -  type: columnDropdownSelector
               displayName: Timestamp Column
               attributeName: colNameTimestamp
               isRequired: true
               enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"
            
            -  type: dropdownSelector
               displayName: Sort Order
               attributeName: sortOrdDateTimestamp
               default: desc
               options:
               - desc
               - asc
               isRequired: true
               enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"
            
            isRequired: false
            enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"

        - groupName: Target Row DML Operations
          items:
          - displayName: Column that Identifies DML Operations
            attributeName: dmlCol
            type: columnDropdownSelector
            isRequired: false

          - displayName: Include Value for Update
            attributeName: capUpdate
            type: toggleButton
            default: false
            isRequired: false
         
          - displayName: Insert Value
            attributeName: dmlInsert
            type: textBox
            default: I
            isRequired: true
         
          - displayName: Update Value
            attributeName: dmlUpdate
            type: textBox
            default: U
            isRequired: true
            enableIf: "{% if config.capUpdate == true %} true {% else %} false {% endif %}"
         
          - displayName: Delete Value
            attributeName: dmlDelete
            type: textBox
            default: D
            isRequired: true
         
        - groupName: Target Delete Options
          items:
          - displayName: Soft Delete
            attributeName: softDeleteFlag
            type: toggleButton
            default: false
            isRequired: false

          - displayName: Retain Last Non-Deleted Values
            attributeName: retainLastNonDeleteFlag
            type: toggleButton
            default: false
            isRequired: false
         
        - groupName: Target Clustering Options
          items:
          - displayName: Cluster Key
            attributeName: clsKey
            type: dropdownSelector
            default: None
            options:
              - None
              - Table Key
              - Primary Key from Source
              - Row Update Timestamp
              - Primary Key and Update Timestamp from Source
              - Update Timestamp and Primary Key from Source
              - Custom Cluster Columns
              - Custom Cluster Key
            isRequired: false

          - displayName: Custom Cluster Key (ex. col1, left(col2,3), coln)
            attributeName: clsKeyCus
            type: textBox
            isRequired: false
            enableIf: "{% if config.clsKey == 'Custom Cluster Key' %} true {% else %} false {% endif %}"
         
        - groupName: Scheduling Options
          items:
          - displayName: Scheduling Options
            attributeName: schedulingMode
            type: dropdownSelector
            default: Warehouse Task
            options:
              - Warehouse Task
              - Serverless Task
            isRequired: true

          - displayName: When Source Stream has Data Flag
            attributeName: flagSrcStream
            type: toggleButton
            isRequired: true

          - displayName: Select Warehouse on which to run task
            attributeName: whName
            type: textBox
            default: '<WAREHOUSE_NAME>'
            isRequired: false
            enableIf: "{% if config.schedulingMode == 'Warehouse Task' %} true {% else %} false {% endif %}"

          - displayName: Select initial serverless Warehouse size
            attributeName: serverlessSize
            type: dropdownSelector
            default: 'MEDIUM'
            options:
              - XSMALL
              - SMALL
              - MEDIUM
              - LARGE
              - XLARGE
              - XXLARGE
            isRequired: false
            enableIf: "{% if config.schedulingMode == 'Serverless Task' %} true {% else %} false {% endif %}"

          - displayName: Task Schedule
            attributeName: schedulePeriodOption
            type: dropdownSelector
            default: Minutes
            options:
              - Minutes
              - CRON
              - Predecessor
            isRequired: TRUE

          - displayName: Enter task schedule using minutes
            attributeName: schedulePeriod
            type: textBox
            default: '60'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Minutes' %} true {% else %} false {% endif %}"

          - displayName: Enter task schedule using CRON
            attributeName: scheduleCRON
            type: textBox
            default: '5 0-23 * * * America/Los_Angeles'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'CRON' %} true {% else %} false {% endif %}"

          - displayName: Enter predecessor task(s) seperated by a comma 
            attributeName: predTask
            type: textBox
            default: ""
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Predecessor' %} true {% else %} false {% endif %}"

          - displayName: Enter root task name
            attributeName: rootTask
            type: textBox
            default: ""
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Predecessor' %} true {% else %} false {% endif %}"

        - groupName: "Pre/Post SQL"
          items: 
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: 'DM_UPDATE_TIMESTAMP'
          transform: "current_timestamp::timestamp_ntz"
          dataType: timestamp
          placement: end
          attributeName: hmUpdTs
      templates:
        create:
          templateString: |-
            {# Set Namespace Variables #}
            {% set nsVariables = namespace(taskWhenRun="") %}
            {% set nsVariables = namespace(partition="") %}
            {% set nsVariables = namespace(orderBy="") %}
            {% set nsVariables = namespace(rowNumber="") %}
            {% set nsVariables = namespace(tableKey=[]) %}
            {% set nsVariables = namespace(sortKey=[]) %}
            {% set nsVariables = namespace(tableKeySort=[]) %}
            {% set nsVariables = namespace(hybridMergeSortFilter=[]) %}

            {# Source Object Location and Name #}
            {% set sourceStorageLocation = sources[0].dependencies[0].node.location.name %}
            {% set sourceDatabaseName = storageLocations | selectattr('name', 'equalto', sourceStorageLocation) | map(attribute='database') | first %}
            {% set sourceSchemaName = storageLocations | selectattr('name', 'equalto', sourceStorageLocation) | map(attribute='schema') | first %}
            {% set sourceTableName = sources[0].dependencies[0].node.name %}
            {% set fullyQualifiedSourceTableName = '"' + sourceDatabaseName + '"."' + sourceSchemaName + '"."' + sourceTableName + '"' %}

            {# Target Stream Location and Name #}
            {% set streamTargetLocationName = node.location.name %}
            {% set streamTargetDatabaseName = storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='database') | first %}
            {% set streamTargetSchemaName = storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='schema') | first %}
            {% set streamName = node.name + '_STREAM' %}
            {% set fullyQualifiedStreamName = '"' + streamTargetDatabaseName + '"."' + streamTargetSchemaName + '"."' + streamName + '"' %}
            {% set changesClauseAt = 'AT(stream => \'' + fullyQualifiedStreamName + '\')' %}

            {# Target Table Info #}
            {% set targetTableDatabase = ref_no_link(node.location.name, node.name).split('.')[0] %} 
            {% set targetTableSchema = ref_no_link(node.location.name, node.name).split('.')[1] %} 
            {% set fullyQualifiedTargetTableName = ref_no_link(node.location.name, node.name).replace('DM_VIEW_','DM_TABLE_') %}
            {% set targetTableName = node.name %}

            {% set targetTableColumnIds = columns | map(attribute='id') | list %}
            {% set targetTableColumnNames = columns | map(attribute='name') | list %}
            {% set targetTableMergeUpdateColumn = columns | selectattr('hmUpdTs', 'defined') | map(attribute='name') | first %}
            {% set targetTableDmlIdentifierColumn = config.dmlCol.name %}
            {% set targetTableDmlIdentifierColumnDatatype = config.dmlCol.dataType %}
            {% set targetTableDmlIdentifierColumnQuotes = '"' + targetTableDmlIdentifierColumn + '"' %}

            {# Merge partition by and order by #}
            {% set targetTableColumnNamesUpdate = targetTableColumnNames | reject('in', config.partitionBy.get('items') | map(attribute='partColName.name')) | list %}

            {% for i in config.partitionBy.get('items') %}
                {%- if loop.first -%}
                    {% set nsVariables.partition = '"' + i.partColName.name + '"' %}
                {% else %}
                    {% set nsVariables.partition = nsVariables.partition + ', "' + i.partColName.name + '"' %}
                {%- endif -%}

                {% set targetTableColumnNamesUpdate = targetTableColumnNames | reject('in', i.partColName.name) | list %}

            {% endfor %}

            {% if config.recordVersioning in ('Datetime Column','Numeric Column') %}
                {% set datetimeNumericColSort = config.orderBy.get('items') %}
                {% set nsVariables.orderBy = '"' + datetimeNumericColSort  | map(attribute='colName.name') | first + '" ' + datetimeNumericColSort  | map(attribute='sortOrd') | first %}
                {% set nsVariables.rowNumber = 'ROW_NUMBER() OVER (PARTITION BY ' + nsVariables.partition + ' ORDER BY ' + nsVariables.orderBy + ')' %}
                {% set nsVariables.hybridMergeSortFilter = 'alias."' + datetimeNumericColSort  | map(attribute='colName.name') | first + '"' %}

                {%- set nsVariables.sortKey = config.orderBy.get('items') %}
                {% set nsVariables.sortKey = nsVariables.sortKey | map(attribute='colName.name') | list %}
            {% else %}
                {% set dateTimeColSort = config.orderByDateTime.get('items') %}
                {% set dateCol = dateTimeColSort | map(attribute='colNameDate.name') | first %}
                {% set timeCol = dateTimeColSort | map(attribute='colNameTimestamp.name') | first %}
                {% set sortOrdDateTimestamp = dateTimeColSort | map(attribute='sortOrdDateTimestamp') | first %}
                {% set nsVariables.orderBy = 'to_timestamp("' + dateCol + '" || ' + '\'T\'' + ' ||"' + timeCol + '") ' + sortOrdDateTimestamp %}
                {% set nsVariables.rowNumber = 'ROW_NUMBER() OVER (PARTITION BY ' + nsVariables.partition + ' ORDER BY ' + nsVariables.orderBy + ')' %}
                {% set nsVariables.hybridMergeSortFilter = 'to_timestamp(alias."' + dateCol + '" || ' + '\'T\'' + ' || alias."' + timeCol + '")' %}

                {%- set nsVariables.sortKey = config.orderByDateTime.get('items') %}
                {% set nsVariables.sortKey = nsVariables.sortKey | map(attribute='colNameDate.name') | list + nsVariables.sortKey | map(attribute='colNameTimestamp.name') | list %}
            {% endif %}

            {%- set nsVariables.tableKey = config.partitionBy.get('items') %}
            {% set nsVariables.tableKey = nsVariables.tableKey | map(attribute='partColName.name') | list %}

            {%- set nsVariables.tableKeySort = nsVariables.tableKey + nsVariables.sortKey %}

            {# Stream Type #}
            {% if config.sourceType == 'Table' %} 
                {% set streamType = 'TABLE' %}
                {% set streamSourceObjectName = fullyQualifiedSourceTableName %}
            {% elif config.sourceType == 'External Table' %} 
                {% set streamType = 'EXTERNAL TABLE' %}
                {% set streamSourceObjectName = fullyQualifiedSourceTableName %}
            {% else %} 
                {% set streamType = 'VIEW' %}
                {% set streamSourceObjectName = fullyQualifiedSourceTableName %}
            {% endif %}

            {# DML Identifier Quoting #}
            {% if ((targetTableDmlIdentifierColumnDatatype in ('FLOAT','BOOLEAN')) or (targetTableDmlIdentifierColumnDatatype[:6] == 'NUMBER')) %}
                {% set insertValue = config.dmlInsert %}
                {% set deleteValue = config.dmlDelete %}
                {% if config.capUpdate == true %}
                    {% set updateValue = config.dmlUpdate %}
                {% endif %}
            {% else %}
                {% set insertValue = "'" + config.dmlInsert + "'" %}
                {% set deleteValue = "'" + config.dmlDelete + "'" %}
                {% if config.capUpdate == true %}
                    {% set updateValue = "'" + config.dmlUpdate + "'" %}
                {% endif %}
            {% endif %}

            {# Stream Append Behavior #}
            {% if streamType == 'TABLE' or streamType == 'VIEW' %} 
                {% set streamAppendMode = 'APPEND_ONLY = FALSE' %}
                {% set changesClauseMode = 'CHANGES(information => default)' %}
                {% set updateStreamFilter = '' %}
                {% set insertStreamFilter = '(metadata$action = \'INSERT\' and metadata$isupdate = false)' %}
                {% if config.capUpdate == true %}
                    {% set updateStreamFilter = ' OR (metadata$action = \'INSERT\' and metadata$isupdate = true)' %}
                {% endif %}
                {% set deleteStreamFilter = ' OR (metadata$action = \'DELETE\' and metadata$isupdate = false)' %}
                {% set whereStreamFilter = 'WHERE (' + insertStreamFilter + updateStreamFilter + deleteStreamFilter + ')' %}
                {% set andStreamFilter = 'AND (' + insertStreamFilter + updateStreamFilter + deleteStreamFilter + ')' %}
                {% set identifyDefaultInsertRow = 'WHEN ' + targetTableDmlIdentifierColumnQuotes + ' = ' + insertValue + ' OR ' + insertStreamFilter + ' THEN ' + insertValue %}
                {% set identifyDefaultDeleteRow = ' WHEN ' + targetTableDmlIdentifierColumnQuotes + ' = ' + deleteValue + deleteStreamFilter + ' THEN ' + deleteValue %}
                {% set identifyDefaultUpdateRow = '' %}
                {% if config.capUpdate == true %}
                    {% set identifyDefaultUpdateRow = ' WHEN ' + targetTableDmlIdentifierColumnQuotes + ' = ' + updateValue + updateStreamFilter + ' THEN ' + updateValue %}
                {% endif %}

                {% set identifyDefaultStreamDeletedRow = 'CASE ' + identifyDefaultInsertRow + identifyDefaultDeleteRow + identifyDefaultUpdateRow + ' END' %}
                {% set identifyDefaultStreamDeletedRowLoadFlag = 'CASE WHEN (CASE ' + identifyDefaultInsertRow + identifyDefaultDeleteRow + identifyDefaultUpdateRow + ' END) = ' + deleteValue + ' THEN 1 ELSE 0 END' %}
            {% else %}
                {% set streamAppendMode = '' %}
            {% endif %}

            {# Stream Initial Row Behavior #}
            {% if streamType == 'TABLE' or streamType == 'VIEW' %} 
                {% if config.initialRows == true %} 
                    {% set streamInitialRowsMode = 'SHOW_INITIAL_ROWS = TRUE' %}
                {% else %} 
                    {% set streamInitialRowsMode = 'SHOW_INITIAL_ROWS = FALSE' %}
                {% endif %}
            {% else %}
                {% set streamInitialRowsMode = '' %}
            {% endif %}

            {# Stream Insert Only Behavior #}
            {% if streamType == 'EXTERNAL TABLE' %} 
                {% if config.insertOnly == true %} 
                    {% set streamInsertOnlyMode = 'INSERT_ONLY = TRUE' %}
                {% else %} 
                    {% set streamInsertOnlyMode = 'INSERT_ONLY = FALSE' %}
                {% endif %}
            {% else %}
                {% set streamInsertOnlyMode = '' %}
            {% endif %}

            {# Hybrid View Info #}
            {# View created in same schema as Target Table #}
            {% set targetHybridViewDatabase = targetTableDatabase %} 
            {% set targetHybridViewSchema = targetTableSchema %} 
            {% set targetHybridViewName = node.name  %}
            {% set fullyQualifiedHybridViewName = targetHybridViewDatabase + '.' + targetHybridViewSchema + '."' + targetHybridViewName + '"' %}

            {# Task Info #}
            {% set taskName = node.name + '_TASK'  %}
            {%- set fullyQualifiedTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + taskName + '"' -%} 

            {# Task Type #}
            {%- if config.schedulingMode == 'Warehouse Task' -%} 
                {%- set taskType = 'WAREHOUSE = ' + config.whName -%} 
            {%- else -%}
                {%- set taskType = 'USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE = ' + config.serverlessSize -%} 
            {%- endif -%}

            {# Schedule Type #}
            {%- if config.schedulePeriodOption == 'Minutes' -%} 
                {%- set nsVariables.taskWhenRun = 'SCHEDULE = ' + "'" + config.schedulePeriod + ' MINUTE' + "'" -%} 
            {% elif config.schedulePeriodOption == 'CRON' %}
                {%- set nsVariables.taskWhenRun = 'SCHEDULE = ' + "'" + 'USING CRON ' + config.scheduleCRON %}
            {%- else -%}
                {%- set nsVariables.taskWhenRun = 'AFTER ' -%}
                {%- set predecessorTasks = (config.predTask).split(",") -%}

                {%- for p in predecessorTasks -%}
                    {%- set nsVariables.taskWhenRun = nsVariables.taskWhenRun + targetTableDatabase + '.' + targetTableSchema + '.' + p -%}
                    {%- if not loop.last -%} 
                        {%- set nsVariables.taskWhenRun = nsVariables.taskWhenRun + ',' -%}
                    {%- endif %}
                {% endfor %}    
            {%- endif -%}

            {# When Stream has data logic #}
            {%- if config.flagSrcStream == true -%} 
                {%- set streamPoll = "WHEN SYSTEM$STREAM_HAS_DATA('" + fullyQualifiedStreamName + "')" -%} 
            {%- endif -%}

            {{ stage('Create Stream') }}
            CREATE OR REPLACE STREAM {{ fullyQualifiedStreamName }}
                ON {{ streamType }} {{ streamSourceObjectName }}
                {{ streamAppendMode }}
                {{ streamInitialRowsMode }}
                {{ streamInsertOnlyMode }}
                
            {{ stage('Create Target Table') }}
            CREATE OR REPLACE TABLE {{ fullyQualifiedTargetTableName }}
                (
                {%- for col in columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                {%- endfor %}
                )

            {% if config.initialRows == true %}
                {{ stage('Target Table Initial Load') }}
                INSERT INTO {{ fullyQualifiedTargetTableName }}
                SELECT
                {%- for col in columns %}
                    "{{ col.name }}"
                    {%- if not loop.last -%}, {% endif %}
                {%- endfor %}
                FROM (SELECT {%- for col in columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% else %}
                                    "{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {% endif %}
                            {%- endfor %}
                            {% if config.softDeleteFlag == false %}
                                ,{{ identifyDefaultStreamDeletedRowLoadFlag }} as load_flag
                            {% endif %}
                    FROM {{ fullyQualifiedStreamName }}
                    QUALIFY {{ nsVariables.rowNumber }} = 1)
                    {% if config.softDeleteFlag == false %}
                        WHERE load_flag = 1
                    {% endif %}
            {% endif %}

            {{ stage('Create Hybrid View') }}
            CREATE OR REPLACE VIEW {{ fullyQualifiedHybridViewName }} (
                {%- for col in columns %}
                    "{{ col.name }}"
                    {%- if not loop.last -%}, {% endif %}
                {%- endfor %} ) AS

            {% if config.softDeleteFlag == true and config.retainLastNonDeleteFlag == false %}
                /* SOFT_DELETE = true RETAIN_LAST_NON_DELETE = false */
                WITH delta AS 
                (
                SELECT {%- for col in columns %}
                            {% if col.name == targetTableMergeUpdateColumn %}
                                {{ sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                            {% elif col.name == targetTableDmlIdentifierColumn %}
                                {{ identifyDefaultStreamDeletedRow }} as "{{ col.name }}"
                            {% else %}
                                "{{ col.name }}" as "{{ col.name }}"
                            {% endif %}
                            {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                FROM {{ fullyQualifiedSourceTableName }}
                {{ changesClauseMode }}
                {{ changesClauseAt }}
                {{ whereStreamFilter }}
                QUALIFY {{ nsVariables.rowNumber }} = 1)

                SELECT {%- for col in columns %}
                            "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                FROM {{ fullyQualifiedTargetTableName }} a
                WHERE NOT EXISTS (SELECT 1
                                FROM delta d
                                WHERE {%- for col in (nsVariables.partition).split(",") %}
                                            a.{{ col }} = d.{{ col }}
                                            {% if not loop.last -%}AND {% endif %}
                                        {%- endfor %})
                UNION ALL
                SELECT {%- for col in columns %}
                            "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                FROM delta d

            {% elif config.softDeleteFlag == false and config.retainLastNonDeleteFlag == false %} 
                /* SOFT_DELETE = false RETAIN_LAST_NON_DELETE = false */
                WITH delta AS 
                (
                SELECT {%- for col in columns %}
                            {% if col.name == targetTableMergeUpdateColumn %}
                                {{ sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                            {% elif col.name == targetTableDmlIdentifierColumn %}
                                {{ identifyDefaultStreamDeletedRow }} as "{{ col.name }}"
                            {% else %}
                                "{{ col.name }}" as "{{ col.name }}"
                            {% endif %}
                            , 
                        {%- endfor %}
                            CASE WHEN {{ identifyDefaultStreamDeletedRow }} = {{ deleteValue }} THEN 0 ELSE 1 END AS LOAD_FLAG
                FROM {{ fullyQualifiedSourceTableName }}
                {{ changesClauseMode }}
                {{ changesClauseAt }}
                {{ whereStreamFilter }}
                QUALIFY {{ nsVariables.rowNumber }} = 1)

                SELECT {%- for col in columns %}
                            "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                FROM {{ fullyQualifiedTargetTableName }} a
                WHERE NOT EXISTS (SELECT 1
                                FROM delta d
                                WHERE {%- for col in (nsVariables.partition).split(",") %}
                                            a.{{ col }} = d.{{ col }}
                                            {% if not loop.last -%}AND {% endif %}
                                        {%- endfor %})
                UNION ALL
                SELECT {%- for col in columns %}
                            "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                FROM delta d
                WHERE LOAD_FLAG = 1

            {% elif config.softDeleteFlag == true and config.retainLastNonDeleteFlag == true %} 
                /* SOFT_DELETE = true RETAIN_LAST_NON_DELETE = true */
                WITH 
                a AS (
                SELECT {%- for col in columns %}
                            {%- if col.name == targetTableMergeUpdateColumn -%}
                                {{ sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                            {% elif col.name == targetTableDmlIdentifierColumn %}
                                {{ identifyDefaultStreamDeletedRow }} as "{{ col.name }}_CALC"
                            {%- else -%}
                                "{{ col.name }}" as "{{ col.name }}"
                            {% endif %}
                            {%- if not loop.last -%}, {%- endif -%}
                    {%- endfor %}
                FROM {{ fullyQualifiedSourceTableName }}
                {{ changesClauseMode }}
                {{ changesClauseAt }}
                WHERE "{{ targetTableDmlIdentifierColumn }}_CALC" != {{ deleteValue }}
                QUALIFY {{ nsVariables.rowNumber }} = 1),

                d AS (
                SELECT {%- for col in columns %}
                            {%- if col.name == targetTableMergeUpdateColumn -%}
                                {{ sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                            {% elif col.name == targetTableDmlIdentifierColumn %}
                                {{ identifyDefaultStreamDeletedRow }} as "{{ col.name }}_CALC"
                            {%- else -%}
                                "{{ col.name }}" as "{{ col.name }}"
                            {% endif %}
                            {%- if not loop.last -%}, {%- endif -%}
                    {%- endfor %}
                FROM {{ fullyQualifiedSourceTableName }}
                {{ changesClauseMode }}
                {{ changesClauseAt }}
                WHERE "{{ targetTableDmlIdentifierColumn }}_CALC" = {{ deleteValue }}
                QUALIFY {{ nsVariables.rowNumber }} = 1),

                ods_d as (
                SELECT {% for col in columns -%}
                            {% if col.name == targetTableMergeUpdateColumn -%}
                                {{ sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                            {% elif col.name in nsVariables.orderBy  -%} 
                                d."{{ col.name }}" as "{{ col.name }}"
                            {% elif col.name == targetTableDmlIdentifierColumn  -%} 
                                {{ deleteValue }} as "{{ col.name }}"
                            {% else -%}
                                a."{{ col.name }}" as "{{ col.name }}"
                            {% endif -%}
                            {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                FROM {{ fullyQualifiedTargetTableName }} a
                INNER JOIN (
                         SELECT {%- for col in nsVariables.tableKeySort %}
                                        "{{ col }}",
                                {%- endfor %}
                                        {{ identifyDefaultStreamDeletedRow }} as "{{ col }}"
                            FROM {{ fullyQualifiedSourceTableName }}
                            {{ changesClauseMode }}
                            {{ changesClauseAt }}
                            WHERE {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}) d
                ON 
                {% for col in nsVariables.tableKey %}
                    a."{{col}}" = d."{{col}}"
                    {%- if not loop.last -%} AND {% endif %}
                    {%- if loop.last -%} ) {% endif %}
                {% endfor %}

                SELECT {%- for col in columns %}
                            {% if col.name == targetTableMergeUpdateColumn %}
                                {{ sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                            {% elif col.name in nsVariables.orderBy  %} 
                                coalesce(d."{{ col.name }}", a."{{ col.name }}") as "{{ col.name }}"
                            {% elif col.name == targetTableDmlIdentifierColumn  %} 
                                coalesce(d."{{targetTableDmlIdentifierColumn}}_CALC", a."{{targetTableDmlIdentifierColumn}}_CALC") as "{{ col.name }}"
                            {% else %}
                                a."{{ col.name }}" as "{{ col.name }}"
                            {% endif %}
                            {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                FROM a
                LEFT OUTER JOIN d
                ON 
                    {%- for col in nsVariables.tableKey %}
                            a."{{ col }}" = d."{{ col }}" AND
                    {%- endfor %}
                    {{ nsVariables.hybridMergeSortFilter | replace('alias','d') }} > {{ nsVariables.hybridMergeSortFilter | replace('alias','a') }}
                UNION ALL
                SELECT {%- for col in columns %}
                        "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                FROM ods_d
                UNION ALL
                SELECT {%- for col in columns %}
                            "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                FROM {{ fullyQualifiedTargetTableName }} d
                WHERE NOT EXISTS (
                    SELECT 1
                    FROM {{ fullyQualifiedSourceTableName }}
                    {{ changesClauseMode }}
                    {{ changesClauseAt }} a
                    WHERE 
                    {%- for col in nsVariables.tableKey %}
                            a."{{ col }}" = d."{{ col }}"
                        {%- if not loop.last -%} AND {% endif %}
                    {%- endfor %}
                     {{ andStreamFilter }})

            {% elif config.softDeleteFlag == false and config.retainLastNonDeleteFlag == true %} 
                /* SOFT_DELETE = false RETAIN_LAST_NON_DELETE = true */
                WITH 
                a AS (
                SELECT {%- for col in columns %}
                            {%- if col.name == targetTableMergeUpdateColumn -%}
                                {{ sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                            {% elif col.name == targetTableDmlIdentifierColumn %}
                                {{ identifyDefaultStreamDeletedRow }} as "{{ col.name }}_CALC"
                            {%- else -%}
                                "{{ col.name }}" as "{{ col.name }}"
                            {% endif %}
                            {%- if not loop.last -%}, {%- endif -%}
                    {%- endfor %}
                FROM {{ fullyQualifiedSourceTableName }}
                {{ changesClauseMode }}
                {{ changesClauseAt }}
                WHERE "{{ targetTableDmlIdentifierColumn }}_CALC" != {{ deleteValue }}
                QUALIFY {{ nsVariables.rowNumber }} = 1),

                d AS (
                SELECT {%- for col in columns %}
                            {%- if col.name == targetTableMergeUpdateColumn -%}
                                {{ sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                            {% elif col.name == targetTableDmlIdentifierColumn %}
                                {{ identifyDefaultStreamDeletedRow }} as "{{ col.name }}_CALC"
                            {%- else -%}
                                "{{ col.name }}" as "{{ col.name }}"
                            {% endif %}
                            {%- if not loop.last -%}, {%- endif -%}
                    {%- endfor %}
                FROM {{ fullyQualifiedSourceTableName }}
                {{ changesClauseMode }}
                {{ changesClauseAt }}
                WHERE "{{ targetTableDmlIdentifierColumn }}_CALC" = {{ deleteValue }}
                QUALIFY {{ nsVariables.rowNumber }} = 1),

                ods_d as (
                SELECT {% for col in columns -%}
                            {% if col.name == targetTableMergeUpdateColumn -%}
                                {{ sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                            {% elif col.name in nsVariables.orderBy  -%} 
                                d."{{ col.name }}" as "{{ col.name }}"
                            {% elif col.name == targetTableDmlIdentifierColumn  -%} 
                                {{ deleteValue }} as "{{ col.name }}"
                            {% else -%}
                                a."{{ col.name }}" as "{{ col.name }}"
                            {% endif -%}
                            {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                FROM {{ fullyQualifiedTargetTableName }} a
                INNER JOIN (
                         SELECT {%- for col in nsVariables.tableKeySort %}
                                        "{{ col }}",
                                {%- endfor %}
                                        {{ identifyDefaultStreamDeletedRow }} as "{{ col }}"
                            FROM {{ fullyQualifiedSourceTableName }}
                            {{ changesClauseMode }}
                            {{ changesClauseAt }}
                            WHERE {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}) d
                ON 
                {% for col in nsVariables.tableKey %}
                    a."{{col}}" = d."{{col}}"
                    {%- if not loop.last -%} AND {% endif %}
                    {%- if loop.last -%} ) {% endif %}
                {% endfor %}

                SELECT 
                {%- for col in columns %}
                    "{{ col.name }}"
                    {%- if not loop.last -%}, {% endif %}
                {%- endfor %}
                FROM (
                    SELECT {%- for col in columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% elif col.name in nsVariables.orderBy  %} 
                                    coalesce(d."{{ col.name }}", a."{{ col.name }}") as "{{ col.name }}"
                                {% elif col.name == targetTableDmlIdentifierColumn  %} 
                                    coalesce(d."{{ targetTableDmlIdentifierColumn }}_CALC", a."{{ targetTableDmlIdentifierColumn }}_CALC") as "{{ col.name }}"
                                {% else %}
                                    a."{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                , 
                        {%- endfor %}
                                CASE WHEN {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }} THEN 0 ELSE 1 END AS LOAD_FLAG
                    FROM a
                    LEFT OUTER JOIN d
                    ON 
                        {%- for col in nsVariables.tableKey %}
                                a."{{ col }}" = d."{{ col }}" AND
                        {%- endfor %}
                        {{ nsVariables.hybridMergeSortFilter | replace('alias','d') }} > {{ nsVariables.hybridMergeSortFilter | replace('alias','a') }}
                )
                WHERE LOAD_FLAG = 1
                UNION ALL
                SELECT {%- for col in columns %}
                        "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                FROM ods_d
                UNION ALL
                SELECT {%- for col in columns %}
                            "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                FROM {{ fullyQualifiedTargetTableName }} d
                WHERE NOT EXISTS (
                    SELECT 1
                    FROM {{ fullyQualifiedSourceTableName }}
                    {{ changesClauseMode }}
                    {{ changesClauseAt }} a
                    WHERE 
                    {%- for col in nsVariables.tableKey %}
                            a."{{ col }}" = d."{{ col }}"
                        {%- if not loop.last -%} AND {% endif %}
                    {%- endfor %}
                     {{ andStreamFilter }})

            {% endif %}

            {{ stage('Create Task') }}
            CREATE OR REPLACE TASK 
                {{ fullyQualifiedTaskName }} 
                {{ taskType}} 
                {{ nsVariables.taskWhenRun }} 
                {% if nsVariables.poll != 'WHEN ' %} {{ nsVariables.poll }} {% endif %}
            AS 
            MERGE INTO {{ fullyQualifiedTargetTableName }}
            USING (SELECT
            {%- for col in columns %}
                        {% if col.name == targetTableMergeUpdateColumn %}
                            {{ sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                        {% else %}
                            "{{ col.name }}" as "{{ col.name }}"
                        {% endif %}
                        {%- if not loop.last -%}, {% endif %}
                {%- endfor %}
            FROM {{ fullyQualifiedStreamName }}
            {{ whereStreamFilter }}
            QUALIFY {{ nsVariables.rowNumber }} = 1) d
            ON 
            {% for col in nsVariables.tableKey %}
                a."{{col}}" = d."{{col}}"
                {%- if not loop.last -%} AND {% endif %}
            {% endfor %}

            WHEN NOT MATCHED and d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ insertValue }} THEN INSERT (
                {% for col in columns %}
                    a."{{ col.name }}"
                    {% if not loop.last %}, {% endif -%}
                {%- endfor -%}
                )
            VALUES (
                {% for col in columns %}
                    d."{{ col.name }}"
                    {% if not loop.last %}, {%- endif -%}
                {%- endfor -%}
                )
            {% if config.capUpdate == true %}
                WHEN NOT MATCHED and d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ updateValue }} THEN INSERT (
                    {% for col in columns %}
                        a."{{ col.name }}"
                        {% if not loop.last %}, {% endif -%}
                    {%- endfor -%}
                    )
                VALUES (
                    {% for col in columns %}
                        d."{{ col.name }}"
                        {% if not loop.last %}, {%- endif -%}
                    {%- endfor -%}
                    )
            {% endif %}
            WHEN NOT MATCHED AND d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }} AND /* softDeleteFlag True */ {{ config.softDeleteFlag }} = True THEN INSERT (
                {% for col in columns %}
                    a."{{ col.name }}"
                    {% if not loop.last %}, {% endif -%}
                {%- endfor -%}
                )
            VALUES (
                {% for col in columns %}
                    d."{{ col.name }}"
                    {% if not loop.last %}, {%- endif -%}
                {%- endfor -%}
                )
            {% if config.capUpdate == true %}
                /* Update DML value selected */
                WHEN MATCHED AND d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ updateValue }} THEN UPDATE SET
                    {% for col in targetTableColumnNamesUpdate %}
                        a."{{ col }}" = d."{{ col }}"
                        {% if not loop.last %}, {% endif -%}
                    {%- endfor -%}
            {% endif %}
            WHEN MATCHED AND d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ insertValue }} THEN UPDATE SET
                {% for col in targetTableColumnNamesUpdate %}
                    a."{{ col }}" = d."{{ col }}"
                    {% if not loop.last %}, {% endif -%}
                {%- endfor -%}
            {% if config.softDeleteFlag == true %}
                /* Soft Delete */
                WHEN MATCHED AND d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}
                THEN UPDATE SET
                    {% for col in (targetTableColumnNamesUpdate) %}
                        {% if (col in (targetTableMergeUpdateColumn, targetTableDmlIdentifierColumn)) or col in (nsVariables.sortKey) %}
                            a."{{ col }}" = d."{{ col }}"
                            {% if not loop.last %}, {% endif -%}
                        {% endif %}
                    {%- endfor -%}
            {% else %}
                /* Hard Delete */
                WHEN MATCHED AND d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}
                THEN DELETE
            {% endif %}
        run:
          templateString: ""
    name: Deferred Merge - Delta Stream
    version: 1
  StepType-23:
    id: "23"
    isDisabled: true
    metadata:
      defaultStorageLocation: STG
      error: null
      nodeMetadataSpec: |-
        capitalized: Deferred Merge - Append Stream
        short: DM_VIEW
        tagColor: black
        plural: Deferred Merge

        deployStrategy: advanced

        config:
        - groupName: Stream Options
          items:
          - displayName: Source Object
            attributeName: sourceType
            type: dropdownSelector
            default: Table
            options:
              - Table
              - External Table
              - View
            isRequired: false

          - displayName: Append Only Stream
            attributeName: appendOnly
            type: dropdownSelector
            default: "true"
            options:
              - "true"
            isRequired: true
            enableIf: "{% if config.sourceType == 'Table' or config.sourceType == 'View' %} true {% else %} false {% endif %}"

          - displayName: Show Initial Rows
            attributeName: initialRows
            type: toggleButton
            default: true
            isRequired: true
            enableIf: "{% if config.sourceType == 'Table' or config.sourceType == 'View' %} true {% else %} false {% endif %}"

          - displayName: Insert Only
            attributeName: insertOnly
            type: toggleButton
            default: false
            isRequired: true
            enableIf: "{% if config.sourceType == 'External Table' %} true {% else %} false {% endif %}"

        - groupName: Target Loading Options
          items:
          - type: tabular
            displayName: 'Table Key(s)'
            attributeName: partitionBy
            columns:
          
            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: partColName
               isRequired: true
                
            isRequired: false

          - displayName: Record Versioning
            attributeName: recordVersioning
            type: dropdownSelector
            default: Datetime Column
            options:
              - Datetime Column
              - Date Column and Time Column
              - Numeric Column
            isRequired: true

          - type: tabular
            displayName: 'Timestamp or Sequence'
            attributeName: orderBy
            columns:
          
            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: colName
               isRequired: true
               enableIf: "{% if config.recordVersioning in ('Datetime Column','Numeric Column') %} true {% else %} false {% endif %}"
            
            -  type: dropdownSelector
               displayName: Sort Order
               attributeName: sortOrd
               default: desc
               options:
               - desc
               - asc
               isRequired: true
               enableIf: "{% if config.recordVersioning in ('Datetime Column','Numeric Column') %} true {% else %} false {% endif %}"
            
            isRequired: false
            enableIf: "{% if config.recordVersioning in ('Datetime Column','Numeric Column') %} true {% else %} false {% endif %}"

          - type: tabular
            displayName: 'Date / Timestamp Columns'
            attributeName: orderByDateTime
            columns:
          
            -  type: columnDropdownSelector
               displayName: Date Column
               attributeName: colNameDate
               isRequired: true
               enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"
            
            -  type: columnDropdownSelector
               displayName: Timestamp Column
               attributeName: colNameTimestamp
               isRequired: true
               enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"
            
            -  type: dropdownSelector
               displayName: Sort Order
               attributeName: sortOrdDateTimestamp
               default: desc
               options:
               - desc
               - asc
               isRequired: true
               enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"
            
            isRequired: false
            enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"

        - groupName: Target Row DML Operations
          items:
          - displayName: Column that Identifies DML Operations
            attributeName: dmlCol
            type: columnDropdownSelector
            isRequired: false

          - displayName: Include Value for Update
            attributeName: capUpdate
            type: toggleButton
            default: false
            isRequired: false
         
          - displayName: Insert Value
            attributeName: dmlInsert
            type: textBox
            default: I
            isRequired: true
         
          - displayName: Update Value
            attributeName: dmlUpdate
            type: textBox
            default: U
            isRequired: true
            enableIf: "{% if config.capUpdate == true %} true {% else %} false {% endif %}"
         
          - displayName: Delete Value
            attributeName: dmlDelete
            type: textBox
            default: D
            isRequired: true
         
        - groupName: Target Delete Options
          items:
          - displayName: Soft Delete
            attributeName: softDeleteFlag
            type: toggleButton
            default: false
            isRequired: false

          - displayName: Retain Last Non-Deleted Values
            attributeName: retainLastNonDeleteFlag
            type: toggleButton
            default: false
            isRequired: false
         
        - groupName: Target Clustering Options
          items:
          - displayName: Cluster Key
            attributeName: clsKey
            type: dropdownSelector
            default: None
            options:
              - None
              - Table Key
              - Primary Key from Source
              - Row Update Timestamp
              - Primary Key and Update Timestamp from Source
              - Update Timestamp and Primary Key from Source
              - Custom Cluster Columns
              - Custom Cluster Key
            isRequired: false

          - displayName: Custom Cluster Key (ex. col1, left(col2,3), coln)
            attributeName: clsKeyCus
            type: textBox
            isRequired: false
            enableIf: "{% if config.clsKey == 'Custom Cluster Key' %} true {% else %} false {% endif %}"
         
        - groupName: Scheduling Options
          items:
          - displayName: Scheduling Options
            attributeName: schedulingMode
            type: dropdownSelector
            default: Warehouse Task
            options:
              - Warehouse Task
              - Serverless Task
            isRequired: true

          - displayName: When Source Stream has Data Flag
            attributeName: flagSrcStream
            type: toggleButton
            isRequired: true

          - displayName: Select Warehouse on which to run task
            attributeName: whName
            type: textBox
            default: '<WAREHOUSE_NAME>'
            isRequired: false
            enableIf: "{% if config.schedulingMode == 'Warehouse Task' %} true {% else %} false {% endif %}"

          - displayName: Select initial serverless Warehouse size
            attributeName: serverlessSize
            type: dropdownSelector
            default: 'MEDIUM'
            options:
              - XSMALL
              - SMALL
              - MEDIUM
              - LARGE
              - XLARGE
              - XXLARGE
            isRequired: false
            enableIf: "{% if config.schedulingMode == 'Serverless Task' %} true {% else %} false {% endif %}"

          - displayName: Task Schedule
            attributeName: schedulePeriodOption
            type: dropdownSelector
            default: Minutes
            options:
              - Minutes
              - CRON
              - Predecessor
            isRequired: TRUE

          - displayName: Enter task schedule using minutes
            attributeName: schedulePeriod
            type: textBox
            default: '60'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Minutes' %} true {% else %} false {% endif %}"

          - displayName: Enter task schedule using CRON
            attributeName: scheduleCRON
            type: textBox
            default: '5 0-23 * * * America/Los_Angeles'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'CRON' %} true {% else %} false {% endif %}"

          - displayName: Enter predecessor task(s) seperated by a comma 
            attributeName: predTask
            type: textBox
            default: ""
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Predecessor' %} true {% else %} false {% endif %}"

          - displayName: Enter root task name
            attributeName: rootTask
            type: textBox
            default: ""
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Predecessor' %} true {% else %} false {% endif %}"

        - groupName: "Pre/Post SQL"
          items: 
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: 'DM_UPDATE_TIMESTAMP'
          transform: "current_timestamp::timestamp_ntz"
          dataType: timestamp
          placement: end
          attributeName: hmUpdTs
      templates:
        create:
          templateString: |
            {% if (currentState == undefined and desiredState != undefined) or (currentState != undefined and desiredState != undefined ) %}

                {# Set Namespace Variables #}
                {% set nsVariables = namespace(taskWhenRun="") %}
                {% set nsVariables = namespace(partition="") %}
                {% set nsVariables = namespace(orderBy="") %}
                {% set nsVariables = namespace(rowNumber="") %}
                {% set nsVariables = namespace(tableKey=[]) %}
                {% set nsVariables = namespace(sortKey=[]) %}
                {% set nsVariables = namespace(tableKeySort=[]) %}
                {% set nsVariables = namespace(hybridMergeSortFilter=[]) %}

                {# Source Object Location and Name #}
                {% set sourceStorageLocation = desiredState.sources[0].dependencies[0].node.location.name %}
                {% set sourceDatabaseName = desiredState.storageLocations | selectattr('name', 'equalto', sourceStorageLocation) | map(attribute='database') | first %}
                {% set sourceSchemaName = desiredState.storageLocations | selectattr('name', 'equalto', sourceStorageLocation) | map(attribute='schema') | first %}
                {% set sourceTableName = desiredState.sources[0].dependencies[0].node.name %}
                {% set fullyQualifiedSourceTableName = '"' + sourceDatabaseName + '"."' + sourceSchemaName + '"."' + sourceTableName + '"' %}

                {# Target Stream Location and Name #}
                {% set streamTargetLocationName = desiredState.node.location.name %}
                {% set streamTargetDatabaseName = desiredState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='database') | first %}
                {% set streamTargetSchemaName = desiredState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='schema') | first %}
                {% set streamName = desiredState.node.name + '_STREAM' %}
                {% set fullyQualifiedStreamName = '"' + streamTargetDatabaseName + '"."' + streamTargetSchemaName + '"."' + streamName + '"' %}
                {% set changesClauseAt = 'AT(stream => \'' + fullyQualifiedStreamName + '\')' %}

                {# Target Table Info #}
                {% set targetTableDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
                {% set targetTableSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetTableName = ref_no_link(desiredState.node.location.name, desiredState.node.name).replace('DM_VIEW_','DM_TABLE_') %}
                {% set targetTableName = desiredState.node.name %}

                {% set targetTableColumnIds = desiredState.columns | map(attribute='id') | list %}
                {% set targetTableColumnNames = desiredState.columns | map(attribute='name') | list %}
                {% set targetTableMergeUpdateColumn = desiredState.columns | selectattr('hmUpdTs', 'defined') | map(attribute='name') | first %}
                {% set targetTableDmlIdentifierColumn = desiredState.config.dmlCol.name %}
                {% set targetTableDmlIdentifierColumnDatatype = desiredState.config.dmlCol.dataType %}
                {% set targetTableDmlIdentifierColumnQuotes = '"' + targetTableDmlIdentifierColumn + '"' %}

                {# Merge partition by and order by #}
                {% set targetTableColumnNamesUpdate = targetTableColumnNames | reject('in', desiredState.config.partitionBy.get('items') | map(attribute='partColName.name')) | list %}

                {% for i in desiredState.config.partitionBy.get('items') %}
                    {%- if loop.first -%}
                        {% set nsVariables.partition = '"' + i.partColName.name + '"' %}
                    {% else %}
                        {% set nsVariables.partition = nsVariables.partition + ', "' + i.partColName.name + '"' %}
                    {%- endif -%}

                    {% set targetTableColumnNamesUpdate = targetTableColumnNames | reject('in', i.partColName.name) | list %}

                {% endfor %}

                {% if desiredState.config.recordVersioning in ('Datetime Column','Numeric Column') %}
                    {% set datetimeNumericColSort = desiredState.config.orderBy.get('items') %}
                    {% set nsVariables.orderBy = '"' + datetimeNumericColSort  | map(attribute='colName.name') | first + '" ' + datetimeNumericColSort  | map(attribute='sortOrd') | first %}
                    {% set nsVariables.rowNumber = 'ROW_NUMBER() OVER (PARTITION BY ' + nsVariables.partition + ' ORDER BY ' + nsVariables.orderBy + ')' %}
                    {% set nsVariables.hybridMergeSortFilter = 'alias."' + datetimeNumericColSort  | map(attribute='colName.name') | first + '"' %}

                    {%- set nsVariables.sortKey = desiredState.config.orderBy.get('items') %}
                    {% set nsVariables.sortKey = nsVariables.sortKey | map(attribute='colName.name') | list %}
                {% else %}
                    {% set dateTimeColSort = desiredState.config.orderByDateTime.get('items') %}
                    {% set dateCol = dateTimeColSort | map(attribute='colNameDate.name') | first %}
                    {% set timeCol = dateTimeColSort | map(attribute='colNameTimestamp.name') | first %}
                    {% set sortOrdDateTimestamp = dateTimeColSort | map(attribute='sortOrdDateTimestamp') | first %}
                    {% set nsVariables.orderBy = 'to_timestamp("' + dateCol + '" || ' + '\'T\'' + ' ||"' + timeCol + '") ' + sortOrdDateTimestamp %}
                    {% set nsVariables.rowNumber = 'ROW_NUMBER() OVER (PARTITION BY ' + nsVariables.partition + ' ORDER BY ' + nsVariables.orderBy + ')' %}
                    {% set nsVariables.hybridMergeSortFilter = 'to_timestamp(alias."' + dateCol + '" || ' + '\'T\'' + ' || alias."' + timeCol + '")' %}

                    {%- set nsVariables.sortKey = desiredState.config.orderByDateTime.get('items') %}
                    {% set nsVariables.sortKey = nsVariables.sortKey | map(attribute='colNameDate.name') | list + nsVariables.sortKey | map(attribute='colNameTimestamp.name') | list %}
                {% endif %}

                {%- set nsVariables.tableKey = desiredState.config.partitionBy.get('items') %}
                {% set nsVariables.tableKey = nsVariables.tableKey | map(attribute='partColName.name') | list %}

                {%- set nsVariables.tableKeySort = nsVariables.tableKey + nsVariables.sortKey %}

                {# Stream Type #}
                {% if desiredState.config.sourceType == 'Table' %} 
                    {% set streamType = 'TABLE' %}
                    {% set streamSourceObjectName = fullyQualifiedSourceTableName %}
                {% elif desiredState.config.sourceType == 'External Table' %} 
                    {% set streamType = 'EXTERNAL TABLE' %}
                    {% set streamSourceObjectName = fullyQualifiedSourceTableName %}
                {% else %} 
                    {% set streamType = 'VIEW' %}
                    {% set streamSourceObjectName = fullyQualifiedSourceTableName %}
                {% endif %}

                {# DML Identifier Quoting #}
                {% if ((targetTableDmlIdentifierColumnDatatype in ('FLOAT','BOOLEAN')) or (targetTableDmlIdentifierColumnDatatype[:6] == 'NUMBER')) %}
                    {% set insertValue = desiredState.config.dmlInsert %}
                    {% set deleteValue = desiredState.config.dmlDelete %}
                    {% if desiredState.config.capUpdate == true %}
                        {% set updateValue = desiredState.config.dmlUpdate %}
                    {% endif %}
                {% else %}
                    {% set insertValue = "'" + desiredState.config.dmlInsert + "'" %}
                    {% set deleteValue = "'" + desiredState.config.dmlDelete + "'" %}
                    {% if desiredState.config.capUpdate == true %}
                        {% set updateValue = "'" + desiredState.config.dmlUpdate + "'" %}
                    {% endif %}
                {% endif %}

                {# Stream Append Behavior #}
                {% if streamType == 'TABLE' or streamType == 'VIEW' %} 
                        {% set streamAppendMode = 'APPEND_ONLY = TRUE' %}
                        {% set changesClauseMode = 'CHANGES(information => append_only)' %}
                {% else %}
                    {% set streamAppendMode = '' %}
                {% endif %}

                {# Stream Initial Row Behavior #}
                {% if streamType == 'TABLE' or streamType == 'VIEW' %} 
                    {% if desiredState.config.initialRows == true %} 
                        {% set streamInitialRowsMode = 'SHOW_INITIAL_ROWS = TRUE' %}
                    {% else %} 
                        {% set streamInitialRowsMode = 'SHOW_INITIAL_ROWS = FALSE' %}
                    {% endif %}
                {% else %}
                    {% set streamInitialRowsMode = '' %}
                {% endif %}

                {# Stream Insert Only Behavior #}
                {% if streamType == 'EXTERNAL TABLE' %} 
                    {% if desiredState.config.insertOnly == true %} 
                        {% set streamInsertOnlyMode = 'INSERT_ONLY = TRUE' %}
                    {% else %} 
                        {% set streamInsertOnlyMode = 'INSERT_ONLY = FALSE' %}
                    {% endif %}
                {% else %}
                    {% set streamInsertOnlyMode = '' %}
                {% endif %}

                {# Hybrid View Info #}
                {# View created in same schema as Target Table #}
                {% set targetHybridViewDatabase = targetTableDatabase %} 
                {% set targetHybridViewSchema = targetTableSchema %} 
                {% set targetHybridViewName = desiredState.node.name  %}
                {% set fullyQualifiedHybridViewName = targetHybridViewDatabase + '.' + targetHybridViewSchema + '."' + targetHybridViewName + '"' %}

                {# Task Info #}
                {% set taskName = desiredState.node.name + '_TASK'  %}
                {%- set fullyQualifiedTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + taskName + '"' -%} 

                {# Task Type #}
                {%- if desiredState.config.schedulingMode == 'Warehouse Task' -%} 
                    {%- set taskType = 'WAREHOUSE = ' + desiredState.config.whName -%} 
                {%- else -%}
                    {%- set taskType = 'USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE = ' + desiredState.config.serverlessSize -%} 
                {%- endif -%}

                {# Schedule Type #}
                {%- if desiredState.config.schedulePeriodOption == 'Minutes' -%} 
                    {%- set nsVariables.taskWhenRun = 'SCHEDULE = ' + "'" + desiredState.config.schedulePeriod + ' MINUTE' + "'" -%} 
                {% elif desiredState.config.schedulePeriodOption == 'CRON' %}
                    {%- set nsVariables.taskWhenRun = 'SCHEDULE = ' + "'" + 'USING CRON ' + desiredState.config.scheduleCRON %}
                {%- else -%}
                    {%- set nsVariables.taskWhenRun = 'AFTER ' -%}
                    {%- set predecessorTasks = (desiredState.config.predTask).split(",") -%}

                    {%- for p in predecessorTasks -%}
                        {%- set nsVariables.taskWhenRun = nsVariables.taskWhenRun + targetTableDatabase + '.' + targetTableSchema + '.' + p -%}
                        {%- if not loop.last -%} 
                            {%- set nsVariables.taskWhenRun = nsVariables.taskWhenRun + ',' -%}
                        {%- endif %}
                    {% endfor %}    
                {%- endif -%}

                {# When Stream has data logic #}
                {%- if desiredState.config.flagSrcStream == true -%} 
                    {%- set streamPoll = "WHEN SYSTEM$STREAM_HAS_DATA('" + fullyQualifiedStreamName + "')" -%} 
                {%- endif -%}

                {{ stage('Create Stream') }}
                CREATE OR REPLACE STREAM {{ fullyQualifiedStreamName }}
                    ON {{ streamType }} {{ streamSourceObjectName }}
                    {{ streamAppendMode }}
                    {{ streamInitialRowsMode }}
                    {{ streamInsertOnlyMode }}
                    
                {{ stage('Create Target Table') }}
                CREATE OR REPLACE TABLE {{ fullyQualifiedTargetTableName }}
                    (
                    {%- for col in desiredState.columns %}
                            "{{ col.name }}" {{ col.dataType }}
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                            {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                    )

                {% if desiredState.config.initialRows == true %}
                    {{ stage('Target Table Initial Load') }}
                    INSERT INTO {{ fullyQualifiedTargetTableName }}
                    SELECT
                    {%- for col in desiredState.columns %}
                        "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                    FROM (SELECT {%- for col in desiredState.columns %}
                                    {% if col.name == targetTableMergeUpdateColumn %}
                                        {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                    {% else %}
                                        "{{ col.name }}" as "{{ col.name }}"
                                    {% endif %}
                                    {%- if not loop.last -%}, {% endif %}
                                {%- endfor %}
                                {% if desiredState.config.softDeleteFlag == false %}
                                    ,case when {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }} then 0 else 1 end as load_flag
                                {% endif %}
                        FROM {{ fullyQualifiedStreamName }}
                        QUALIFY {{ nsVariables.rowNumber }} = 1)
                        {% if desiredState.config.softDeleteFlag == false %}
                            WHERE load_flag = 1
                        {% endif %}
                {% endif %}

                {{ stage('Create Hybrid View') }}
                CREATE OR REPLACE VIEW {{ fullyQualifiedHybridViewName }} (
                    {%- for col in desiredState.columns %}
                        "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {%- endfor %} ) AS

                {% if desiredState.config.softDeleteFlag == true and desiredState.config.retainLastNonDeleteFlag == false %}
                    /* SOFT_DELETE = true RETAIN_LAST_NON_DELETE = false */
                    WITH delta AS 
                    (
                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% else %}
                                    "{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM {{ fullyQualifiedSourceTableName }}
                    {{ changesClauseMode }}
                    {{ changesClauseAt }}
                    QUALIFY {{ nsVariables.rowNumber }} = 1)

                    SELECT {%- for col in desiredState.columns %}
                                "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM {{ fullyQualifiedTargetTableName }} a
                    WHERE NOT EXISTS (SELECT 1
                                    FROM delta d
                                    WHERE {%- for col in (nsVariables.partition).split(",") %}
                                                a.{{ col }} = d.{{ col }}
                                                {% if not loop.last -%}AND {% endif %}
                                            {%- endfor %})
                    UNION ALL
                    SELECT {%- for col in desiredState.columns %}
                                "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM delta d

                {% elif desiredState.config.softDeleteFlag == false and desiredState.config.retainLastNonDeleteFlag == false %} 
                    /* SOFT_DELETE = false RETAIN_LAST_NON_DELETE = false */
                    WITH delta AS 
                    (
                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% else %}
                                    "{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                ,
                        {%- endfor %}
                                CASE WHEN {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }} THEN 0 ELSE 1 END AS LOAD_FLAG
                    FROM {{ fullyQualifiedSourceTableName }}
                    {{ changesClauseMode }}
                    {{ changesClauseAt }}
                    QUALIFY {{ nsVariables.rowNumber }} = 1)

                    SELECT {%- for col in desiredState.columns %}
                                "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM {{ fullyQualifiedTargetTableName }} a
                    WHERE NOT EXISTS (SELECT 1
                                    FROM delta d
                                    WHERE {%- for col in (nsVariables.partition).split(",") %}
                                                a.{{ col }} = d.{{ col }}
                                                {% if not loop.last -%}AND {% endif %}
                                            {%- endfor %})
                    UNION ALL
                    SELECT {%- for col in desiredState.columns %}
                                "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM delta d
                    WHERE LOAD_FLAG = 1

                {% elif desiredState.config.softDeleteFlag == true and desiredState.config.retainLastNonDeleteFlag == true %} 
                    /* SOFT_DELETE = true RETAIN_LAST_NON_DELETE = true */
                    WITH 
                    a AS (
                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% else %}
                                    "{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM {{ fullyQualifiedSourceTableName }}
                    {{ changesClauseMode }}
                    {{ changesClauseAt }}
                    WHERE {{ targetTableDmlIdentifierColumnQuotes }} != {{ deleteValue }}
                    QUALIFY {{ nsVariables.rowNumber }} = 1),

                    d AS (
                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% else %}
                                    "{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM {{ fullyQualifiedSourceTableName }}
                    {{ changesClauseMode }}
                    {{ changesClauseAt }}
                    WHERE {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}
                    QUALIFY {{ nsVariables.rowNumber }} = 1),

                    ods_d as (
                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% elif col.name in nsVariables.orderBy  %} 
                                    d."{{ col.name }}" as "{{ col.name }}"
                                {% elif col.name == targetTableDmlIdentifierColumn  %} 
                                    {{ deleteValue }} as "{{ col.name }}"
                                {% else %}
                                    a."{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM {{ fullyQualifiedTargetTableName }} a
                    INNER JOIN (
                            SELECT {%- for col in nsVariables.tableKeySort %}
                                            "{{ col }}"
                                        {%- if not loop.last -%}, {% endif %}
                                    {%- endfor %}
                                FROM {{ fullyQualifiedSourceTableName }}
                                {{ changesClauseMode }}
                                {{ changesClauseAt }}
                                WHERE {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}) d
                    ON 
                    {% for col in nsVariables.tableKey %}
                        a."{{col}}" = d."{{col}}"
                        {%- if not loop.last -%} AND {% endif %}
                        {%- if loop.last -%} ) {% endif %}
                    {% endfor %}

                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% elif col.name in nsVariables.orderBy  %} 
                                    coalesce(d."{{ col.name }}", a."{{ col.name }}") as "{{ col.name }}"
                                {% elif col.name == targetTableDmlIdentifierColumn  %} 
                                    coalesce(d."{{ col.name }}", a."{{ col.name }}") as "{{ col.name }}"
                                {% else %}
                                    a."{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM a
                    LEFT OUTER JOIN d
                    ON 
                        {%- for col in nsVariables.tableKey %}
                                a."{{ col }}" = d."{{ col }}" AND
                        {%- endfor %}
                        {{ nsVariables.hybridMergeSortFilter | replace('alias','d') }} > {{ nsVariables.hybridMergeSortFilter | replace('alias','a') }}
                    UNION ALL
                    SELECT {%- for col in desiredState.columns %}
                            "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM ods_d
                    UNION ALL
                    SELECT {%- for col in desiredState.columns %}
                                "{{ col.name }}"
                                {%- if not loop.last -%}, {% endif %}
                            {%- endfor %}
                    FROM {{ fullyQualifiedTargetTableName }} d
                    WHERE NOT EXISTS (
                        SELECT 1
                        FROM {{ fullyQualifiedSourceTableName }}
                        {{ changesClauseMode }}
                        {{ changesClauseAt }} a
                        WHERE 
                        {%- for col in nsVariables.tableKey %}
                                a."{{ col }}" = d."{{ col }}"
                            {%- if not loop.last -%} AND {% endif %}
                        {%- endfor %})

                {% elif desiredState.config.softDeleteFlag == false and desiredState.config.retainLastNonDeleteFlag == true %} 
                    /* SOFT_DELETE = false RETAIN_LAST_NON_DELETE = true */
                    WITH 
                    a AS (
                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% else %}
                                    "{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {% endif %}
                            {%- endfor %}
                    FROM {{ fullyQualifiedSourceTableName }}
                    {{ changesClauseMode }}
                    {{ changesClauseAt }}
                    WHERE {{ targetTableDmlIdentifierColumnQuotes }} != {{ deleteValue }}
                    QUALIFY {{ nsVariables.rowNumber }} = 1),

                    d AS (
                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% else %}
                                    "{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM {{ fullyQualifiedSourceTableName }}
                    {{ changesClauseMode }}
                    {{ changesClauseAt }}
                    WHERE {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}
                    QUALIFY {{ nsVariables.rowNumber }} = 1),

                    ods_d as (
                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% elif col.name in nsVariables.orderBy  %} 
                                    d."{{ col.name }}" as "{{ col.name }}"
                                {% elif col.name == targetTableDmlIdentifierColumn  %} 
                                    {{ deleteValue }} as "{{ col.name }}"
                                {% else %}
                                    a."{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM {{ fullyQualifiedTargetTableName }} a
                    INNER JOIN (
                            SELECT {%- for col in nsVariables.tableKeySort %}
                                            "{{ col }}"
                                        {%- if not loop.last -%}, {% endif %}
                                    {%- endfor %}
                                FROM {{ fullyQualifiedSourceTableName }}
                                {{ changesClauseMode }}
                                {{ changesClauseAt }}
                                WHERE {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}) d
                    ON 
                    {% for col in nsVariables.tableKey %}
                        a."{{col}}" = d."{{col}}"
                        {%- if not loop.last -%} AND {% endif %}
                        {%- if loop.last -%} ) {% endif %}
                    {% endfor %}

                    SELECT 
                    {%- for col in desiredState.columns %}
                            "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                    FROM (
                        SELECT {%- for col in desiredState.columns %}
                                    {% if col.name == targetTableMergeUpdateColumn %}
                                        {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                    {% elif col.name in nsVariables.orderBy  %} 
                                        coalesce(d."{{ col.name }}", a."{{ col.name }}") as "{{ col.name }}"
                                    {% elif col.name == targetTableDmlIdentifierColumn  %} 
                                        coalesce(d."{{ col.name }}", a."{{ col.name }}") as "{{ col.name }}"
                                    {% else %}
                                        a."{{ col.name }}" as "{{ col.name }}"
                                    {% endif %}
                                    ,
                            {%- endfor %}
                            case when coalesce(d.{{ targetTableDmlIdentifierColumnQuotes }}, a.{{ targetTableDmlIdentifierColumnQuotes }}) = {{ deleteValue }} then 0 else 1 end as load_flag
                        FROM a
                        LEFT OUTER JOIN d
                        ON 
                            {%- for col in nsVariables.tableKey %}
                                    a."{{ col }}" = d."{{ col }}" AND
                            {%- endfor %}
                            {{ nsVariables.hybridMergeSortFilter | replace('alias','d') }} > {{ nsVariables.hybridMergeSortFilter | replace('alias','a') }}
                        )
                        WHERE load_flag = 1
                        UNION ALL
                        SELECT {%- for col in desiredState.columns %}
                                "{{ col.name }}"
                                {%- if not loop.last -%}, {% endif %}
                            {%- endfor %}
                        FROM ods_d
                        UNION ALL
                        SELECT {%- for col in desiredState.columns %}
                                    "{{ col.name }}"
                                    {%- if not loop.last -%}, {% endif %}
                                {%- endfor %}
                        FROM {{ fullyQualifiedTargetTableName }} d
                        WHERE NOT EXISTS (
                            SELECT 1
                            FROM {{ fullyQualifiedSourceTableName }}
                            {{ changesClauseMode }}
                            {{ changesClauseAt }} a
                            WHERE 
                            {%- for col in nsVariables.tableKey %}
                                    a."{{ col }}" = d."{{ col }}"
                                {%- if not loop.last -%} AND {% endif %}
                            {%- endfor %})

                {% endif %}

                {%- if desiredState.config.schedulePeriodOption == 'Predecessor' -%} 
                    {%- set fullyQualifiedRootTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + desiredState.config.rootTask + '"' -%} 
                    {{ stage('Suspend Root Task', true, "sql") }}
                    ALTER TASK {{ fullyQualifiedRootTaskName }} SUSPEND
                {%- endif -%}

                {{ stage('Create Task') }}
                CREATE OR REPLACE TASK 
                    {{ fullyQualifiedTaskName }} 
                    {{ taskType}} 
                    {{ nsVariables.taskWhenRun }} 
                    {% if nsVariables.poll != 'WHEN ' %} {{ nsVariables.poll }} {% endif %}
                AS 
                MERGE INTO {{ fullyQualifiedTargetTableName }} a
                USING (SELECT
                {%- for col in desiredState.columns %}
                            {% if col.name == targetTableMergeUpdateColumn %}
                                {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                            {% else %}
                                "{{ col.name }}" as "{{ col.name }}"
                            {% endif %}
                            {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                FROM {{ fullyQualifiedStreamName }}
                {{ whereStreamFilter }}
                QUALIFY {{ nsVariables.rowNumber }} = 1) d
                ON 
                {% for col in nsVariables.tableKey %}
                    a."{{col}}" = d."{{col}}"
                    {%- if not loop.last -%} AND {% endif %}
                {% endfor %}

                WHEN NOT MATCHED and d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ insertValue }} THEN INSERT (
                    {% for col in desiredState.columns %}
                        a."{{ col.name }}"
                        {% if not loop.last %}, {% endif -%}
                    {%- endfor -%}
                    )
                VALUES (
                    {% for col in desiredState.columns %}
                        d."{{ col.name }}"
                        {% if not loop.last %}, {%- endif -%}
                    {%- endfor -%}
                    )
                {% if desiredState.config.capUpdate == true %}
                    WHEN NOT MATCHED and d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ updateValue }} THEN INSERT (
                        {% for col in desiredState.columns %}
                            a."{{ col.name }}"
                            {% if not loop.last %}, {% endif -%}
                        {%- endfor -%}
                        )
                    VALUES (
                        {% for col in desiredState.columns %}
                            d."{{ col.name }}"
                            {% if not loop.last %}, {%- endif -%}
                        {%- endfor -%}
                        )
                {% endif %}
                WHEN NOT MATCHED AND d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }} AND /* softDeleteFlag True */ {{ desiredState.config.softDeleteFlag }} = True THEN INSERT (
                    {% for col in desiredState.columns %}
                        a."{{ col.name }}"
                        {% if not loop.last %}, {% endif -%}
                    {%- endfor -%}
                    )
                VALUES (
                    {% for col in desiredState.columns %}
                        d."{{ col.name }}"
                        {% if not loop.last %}, {%- endif -%}
                    {%- endfor -%}
                    )
                {% if desiredState.config.capUpdate == true %}
                    /* Update DML value selected */
                    WHEN MATCHED AND d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ updateValue }} THEN UPDATE SET
                        {% for col in targetTableColumnNamesUpdate %}
                            a."{{ col }}" = d."{{ col }}"
                            {% if not loop.last %}, {% endif -%}
                        {%- endfor -%}
                {% endif %}
                WHEN MATCHED AND d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ insertValue }} THEN UPDATE SET
                    {% for col in targetTableColumnNamesUpdate %}
                        a."{{ col }}" = d."{{ col }}"
                        {% if not loop.last %}, {% endif -%}
                    {%- endfor -%}
                {% if desiredState.config.softDeleteFlag == true %}
                    /* Soft Delete */
                    WHEN MATCHED AND d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}
                    THEN UPDATE SET
                        {% for col in (targetTableColumnNamesUpdate) %}
                            {% if (col in (targetTableMergeUpdateColumn, targetTableDmlIdentifierColumn)) or col in (nsVariables.sortKey) %}
                                a."{{ col }}" = d."{{ col }}"
                                {% if not loop.last %}, {% endif -%}
                            {% endif %}
                        {%- endfor -%}
                {% else %}
                    /* Hard Delete */
                    WHEN MATCHED AND d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}
                    THEN DELETE
                {% endif %}

                {%- if desiredState.config.schedulePeriodOption != 'Predecessor' -%} 
                    {{ stage('Resume Task', true, "sql") }}
                    ALTER TASK {{ fullyQualifiedTaskName }} RESUME;
                {%- endif -%}

            {% elif currentState != undefined and desiredState == undefined %}

                {# Target Stream Location and Name #}
                {% set streamTargetLocationName = currentState.node.location.name %}
                {% set streamTargetDatabaseName = currentState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='database') | first %}
                {% set streamTargetSchemaName = currentState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='schema') | first %}
                {% set streamName = currentState.node.name + '_STREAM' %}
                {% set fullyQualifiedStreamName = '"' + streamTargetDatabaseName + '"."' + streamTargetSchemaName + '"."' + streamName + '"' %}

                {# Target Table Info #}
                {% set targetTableDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
                {% set targetTableSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetTableName = ref_no_link(currentState.node.location.name, currentState.node.name).replace('DM_VIEW_','DM_TABLE_') %}
                {% set targetTableName = currentState.node.name %}

                {# Hybrid View Info #}
                {# View created in same schema as Target Table #}
                {% set targetHybridViewDatabase = targetTableDatabase %} 
                {% set targetHybridViewSchema = targetTableSchema %} 
                {% set targetHybridViewName = currentState.node.name  %}
                {% set fullyQualifiedHybridViewName = targetHybridViewDatabase + '.' + targetHybridViewSchema + '."' + targetHybridViewName + '"' %}

                {# Task Info #}
                {% set taskName = currentState.node.name + '_TASK'  %}
                {%- set fullyQualifiedTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + taskName + '"' -%} 

                {{ stage('Drop Stream') }}
                DROP STREAM IF EXISTS {{ fullyQualifiedStreamName }}

                {{ stage('Drop Table') }}
                DROP TABLE IF EXISTS {{ fullyQualifiedTargetTableName }}

                {{ stage('Drop View') }}
                DROP VIEW IF EXISTS {{ fullyQualifiedHybridViewName }}

                {%- if currentState.config.schedulingPeriodOption == 'Predecessor' -%} 
                {{ stage('Suspend Root Task', true, "sql") }}
                    ALTER TASK IF EXISTS {{ fullyQualifiedRootTaskName }} SUSPEND
                {{ stage('Drop Current Task', true, "sql") }}
                    DROP TASK IF EXISTS {{ fullyQualifiedTaskName }} 
                {%- else -%}
                {{ stage('Drop Current Task', true, "sql") }}
                    DROP TASK IF EXISTS {{ fullyQualifiedTaskName }} 
                {%- endif -%}

            {%- else -%}

                {{ stage('Nothing to do.') }}
                select 1 = 0

            {% endif %}
        run:
          templateString: ""
    name: Deferred Merge - Append Stream - v0
    version: 1
  StepType-24:
    id: "24"
    isDisabled: true
    metadata:
      defaultStorageLocation: STG
      error: null
      nodeMetadataSpec: |-
        capitalized: Deferred Merge - Delta Stream
        short: DM_VIEW
        tagColor: black
        plural: Deferred Merge

        deployStrategy: advanced

        config:
        - groupName: Stream Options
          items:
          - displayName: Source Object
            attributeName: sourceType
            type: dropdownSelector
            default: Table
            options:
              - Table
              - External Table
              - View
            isRequired: false

          - displayName: Append Only Stream
            attributeName: appendOnly
            type: dropdownSelector
            default: "false"
            options:
              - "false"
            isRequired: true
            enableIf: "{% if config.sourceType == 'Table' or config.sourceType == 'View' %} true {% else %} false {% endif %}"

          - displayName: Show Initial Rows
            attributeName: initialRows
            type: toggleButton
            default: true
            isRequired: true
            enableIf: "{% if config.sourceType == 'Table' or config.sourceType == 'View' %} true {% else %} false {% endif %}"

          - displayName: Insert Only
            attributeName: insertOnly
            type: toggleButton
            default: false
            isRequired: true
            enableIf: "{% if config.sourceType == 'External Table' %} true {% else %} false {% endif %}"

        - groupName: Target Loading Options
          items:
          - type: tabular
            displayName: 'Table Key(s)'
            attributeName: partitionBy
            columns:
          
            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: partColName
               isRequired: true
                
            isRequired: false

          - displayName: Record Versioning
            attributeName: recordVersioning
            type: dropdownSelector
            default: Datetime Column
            options:
              - Datetime Column
              - Date Column and Time Column
              - Numeric Column
            isRequired: true

          - type: tabular
            displayName: 'Timestamp or Sequence'
            attributeName: orderBy
            columns:
          
            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: colName
               isRequired: true
               enableIf: "{% if config.recordVersioning in ('Datetime Column','Numeric Column') %} true {% else %} false {% endif %}"
            
            -  type: dropdownSelector
               displayName: Sort Order
               attributeName: sortOrd
               default: desc
               options:
               - desc
               - asc
               isRequired: true
               enableIf: "{% if config.recordVersioning in ('Datetime Column','Numeric Column') %} true {% else %} false {% endif %}"
            
            isRequired: false
            enableIf: "{% if config.recordVersioning in ('Datetime Column','Numeric Column') %} true {% else %} false {% endif %}"

          - type: tabular
            displayName: 'Date / Timestamp Columns'
            attributeName: orderByDateTime
            columns:
          
            -  type: columnDropdownSelector
               displayName: Date Column
               attributeName: colNameDate
               isRequired: true
               enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"
            
            -  type: columnDropdownSelector
               displayName: Timestamp Column
               attributeName: colNameTimestamp
               isRequired: true
               enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"
            
            -  type: dropdownSelector
               displayName: Sort Order
               attributeName: sortOrdDateTimestamp
               default: desc
               options:
               - desc
               - asc
               isRequired: true
               enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"
            
            isRequired: false
            enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"

        - groupName: Target Row DML Operations
          items:
          - displayName: Column that Identifies DML Operations
            attributeName: dmlCol
            type: columnDropdownSelector
            isRequired: false

          - displayName: Include Value for Update
            attributeName: capUpdate
            type: toggleButton
            default: false
            isRequired: false
         
          - displayName: Insert Value
            attributeName: dmlInsert
            type: textBox
            default: I
            isRequired: true
         
          - displayName: Update Value
            attributeName: dmlUpdate
            type: textBox
            default: U
            isRequired: true
            enableIf: "{% if config.capUpdate == true %} true {% else %} false {% endif %}"
         
          - displayName: Delete Value
            attributeName: dmlDelete
            type: textBox
            default: D
            isRequired: true
         
        - groupName: Target Delete Options
          items:
          - displayName: Soft Delete
            attributeName: softDeleteFlag
            type: toggleButton
            default: false
            isRequired: false

          - displayName: Retain Last Non-Deleted Values
            attributeName: retainLastNonDeleteFlag
            type: toggleButton
            default: false
            isRequired: false
         
        - groupName: Target Clustering Options
          items:
          - displayName: Cluster Key
            attributeName: clsKey
            type: dropdownSelector
            default: None
            options:
              - None
              - Table Key
              - Primary Key from Source
              - Row Update Timestamp
              - Primary Key and Update Timestamp from Source
              - Update Timestamp and Primary Key from Source
              - Custom Cluster Columns
              - Custom Cluster Key
            isRequired: false

          - displayName: Custom Cluster Key (ex. col1, left(col2,3), coln)
            attributeName: clsKeyCus
            type: textBox
            isRequired: false
            enableIf: "{% if config.clsKey == 'Custom Cluster Key' %} true {% else %} false {% endif %}"
         
        - groupName: Scheduling Options
          items:
          - displayName: Scheduling Options
            attributeName: schedulingMode
            type: dropdownSelector
            default: Warehouse Task
            options:
              - Warehouse Task
              - Serverless Task
            isRequired: true

          - displayName: When Source Stream has Data Flag
            attributeName: flagSrcStream
            type: toggleButton
            isRequired: true

          - displayName: Select Warehouse on which to run task
            attributeName: whName
            type: textBox
            default: '<WAREHOUSE_NAME>'
            isRequired: false
            enableIf: "{% if config.schedulingMode == 'Warehouse Task' %} true {% else %} false {% endif %}"

          - displayName: Select initial serverless Warehouse size
            attributeName: serverlessSize
            type: dropdownSelector
            default: 'MEDIUM'
            options:
              - XSMALL
              - SMALL
              - MEDIUM
              - LARGE
              - XLARGE
              - XXLARGE
            isRequired: false
            enableIf: "{% if config.schedulingMode == 'Serverless Task' %} true {% else %} false {% endif %}"

          - displayName: Task Schedule
            attributeName: schedulePeriodOption
            type: dropdownSelector
            default: Minutes
            options:
              - Minutes
              - CRON
              - Predecessor
            isRequired: TRUE

          - displayName: Enter task schedule using minutes
            attributeName: schedulePeriod
            type: textBox
            default: '60'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Minutes' %} true {% else %} false {% endif %}"

          - displayName: Enter task schedule using CRON
            attributeName: scheduleCRON
            type: textBox
            default: '5 0-23 * * * America/Los_Angeles'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'CRON' %} true {% else %} false {% endif %}"

          - displayName: Enter predecessor task(s) seperated by a comma 
            attributeName: predTask
            type: textBox
            default: ""
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Predecessor' %} true {% else %} false {% endif %}"

          - displayName: Enter root task name
            attributeName: rootTask
            type: textBox
            default: ""
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Predecessor' %} true {% else %} false {% endif %}"

        - groupName: "Pre/Post SQL"
          items: 
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: 'DM_UPDATE_TIMESTAMP'
          transform: "current_timestamp::timestamp_ntz"
          dataType: timestamp
          placement: end
          attributeName: hmUpdTs
      templates:
        create:
          templateString: |
            {% if (currentState == undefined and desiredState != undefined) or (currentState != undefined and desiredState != undefined ) %}

            {# Set Namespace Variables #}
                {% set nsVariables = namespace(taskWhenRun="") %}
                {% set nsVariables = namespace(partition="") %}
                {% set nsVariables = namespace(orderBy="") %}
                {% set nsVariables = namespace(rowNumber="") %}
                {% set nsVariables = namespace(tableKey=[]) %}
                {% set nsVariables = namespace(sortKey=[]) %}
                {% set nsVariables = namespace(tableKeySort=[]) %}
                {% set nsVariables = namespace(hybridMergeSortFilter=[]) %}

                {# Source Object Location and Name #}
                {% set sourceStorageLocation = desiredState.sources[0].dependencies[0].node.location.name %}
                {% set sourceDatabaseName = desiredState.storageLocations | selectattr('name', 'equalto', sourceStorageLocation) | map(attribute='database') | first %}
                {% set sourceSchemaName = desiredState.storageLocations | selectattr('name', 'equalto', sourceStorageLocation) | map(attribute='schema') | first %}
                {% set sourceTableName = desiredState.sources[0].dependencies[0].node.name %}
                {% set fullyQualifiedSourceTableName = '"' + sourceDatabaseName + '"."' + sourceSchemaName + '"."' + sourceTableName + '"' %}

                {# Target Stream Location and Name #}
                {% set streamTargetLocationName = desiredState.node.location.name %}
                {% set streamTargetDatabaseName = desiredState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='database') | first %}
                {% set streamTargetSchemaName = desiredState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='schema') | first %}
                {% set streamName = desiredState.node.name + '_STREAM' %}
                {% set fullyQualifiedStreamName = '"' + streamTargetDatabaseName + '"."' + streamTargetSchemaName + '"."' + streamName + '"' %}
                {% set changesClauseAt = 'AT(stream => \'' + fullyQualifiedStreamName + '\')' %}

                {# Target Table Info #}
                {% set targetTableDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
                {% set targetTableSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetTableName = ref_no_link(desiredState.node.location.name, desiredState.node.name).replace('DM_VIEW_','DM_TABLE_') %}
                {% set targetTableName = desiredState.node.name %}

                {% set targetTableColumnIds = desiredState.columns | map(attribute='id') | list %}
                {% set targetTableColumnNames = desiredState.columns | map(attribute='name') | list %}
                {% set targetTableMergeUpdateColumn = desiredState.columns | selectattr('hmUpdTs', 'defined') | map(attribute='name') | first %}
                {% set targetTableDmlIdentifierColumn = desiredState.config.dmlCol.name %}
                {% set targetTableDmlIdentifierColumnDatatype = desiredState.config.dmlCol.dataType %}
                {% set targetTableDmlIdentifierColumnQuotes = '"' + targetTableDmlIdentifierColumn + '"' %}

                {# Merge partition by and order by #}
                {% set targetTableColumnNamesUpdate = targetTableColumnNames | reject('in', desiredState.config.partitionBy.get('items') | map(attribute='partColName.name')) | list %}

                {% for i in desiredState.config.partitionBy.get('items') %}
                    {%- if loop.first -%}
                        {% set nsVariables.partition = '"' + i.partColName.name + '"' %}
                    {% else %}
                        {% set nsVariables.partition = nsVariables.partition + ', "' + i.partColName.name + '"' %}
                    {%- endif -%}

                    {% set targetTableColumnNamesUpdate = targetTableColumnNames | reject('in', i.partColName.name) | list %}

                {% endfor %}

                {% if desiredState.config.recordVersioning in ('Datetime Column','Numeric Column') %}
                    {% set datetimeNumericColSort = desiredState.config.orderBy.get('items') %}
                    {% set nsVariables.orderBy = '"' + datetimeNumericColSort  | map(attribute='colName.name') | first + '" ' + datetimeNumericColSort  | map(attribute='sortOrd') | first %}
                    {% set nsVariables.rowNumber = 'ROW_NUMBER() OVER (PARTITION BY ' + nsVariables.partition + ' ORDER BY ' + nsVariables.orderBy + ')' %}
                    {% set nsVariables.hybridMergeSortFilter = 'alias."' + datetimeNumericColSort  | map(attribute='colName.name') | first + '"' %}

                    {%- set nsVariables.sortKey = desiredState.config.orderBy.get('items') %}
                    {% set nsVariables.sortKey = nsVariables.sortKey | map(attribute='colName.name') | list %}
                {% else %}
                    {% set dateTimeColSort = desiredState.config.orderByDateTime.get('items') %}
                    {% set dateCol = dateTimeColSort | map(attribute='colNameDate.name') | first %}
                    {% set timeCol = dateTimeColSort | map(attribute='colNameTimestamp.name') | first %}
                    {% set sortOrdDateTimestamp = dateTimeColSort | map(attribute='sortOrdDateTimestamp') | first %}
                    {% set nsVariables.orderBy = 'to_timestamp("' + dateCol + '" || ' + '\'T\'' + ' ||"' + timeCol + '") ' + sortOrdDateTimestamp %}
                    {% set nsVariables.rowNumber = 'ROW_NUMBER() OVER (PARTITION BY ' + nsVariables.partition + ' ORDER BY ' + nsVariables.orderBy + ')' %}
                    {% set nsVariables.hybridMergeSortFilter = 'to_timestamp(alias."' + dateCol + '" || ' + '\'T\'' + ' || alias."' + timeCol + '")' %}

                    {%- set nsVariables.sortKey = desiredState.config.orderByDateTime.get('items') %}
                    {% set nsVariables.sortKey = nsVariables.sortKey | map(attribute='colNameDate.name') | list + nsVariables.sortKey | map(attribute='colNameTimestamp.name') | list %}
                {% endif %}

                {%- set nsVariables.tableKey = desiredState.config.partitionBy.get('items') %}
                {% set nsVariables.tableKey = nsVariables.tableKey | map(attribute='partColName.name') | list %}

                {%- set nsVariables.tableKeySort = nsVariables.tableKey + nsVariables.sortKey %}

                {# Stream Type #}
                {% if desiredState.config.sourceType == 'Table' %} 
                    {% set streamType = 'TABLE' %}
                    {% set streamSourceObjectName = fullyQualifiedSourceTableName %}
                {% elif desiredState.config.sourceType == 'External Table' %} 
                    {% set streamType = 'EXTERNAL TABLE' %}
                    {% set streamSourceObjectName = fullyQualifiedSourceTableName %}
                {% else %} 
                    {% set streamType = 'VIEW' %}
                    {% set streamSourceObjectName = fullyQualifiedSourceTableName %}
                {% endif %}

                {# DML Identifier Quoting #}
                {% if ((targetTableDmlIdentifierColumnDatatype in ('FLOAT','BOOLEAN')) or (targetTableDmlIdentifierColumnDatatype[:6] == 'NUMBER')) %}
                    {% set insertValue = desiredState.config.dmlInsert %}
                    {% set deleteValue = desiredState.config.dmlDelete %}
                    {% if desiredState.config.capUpdate == true %}
                        {% set updateValue = desiredState.config.dmlUpdate %}
                    {% endif %}
                {% else %}
                    {% set insertValue = "'" + desiredState.config.dmlInsert + "'" %}
                    {% set deleteValue = "'" + desiredState.config.dmlDelete + "'" %}
                    {% if desiredState.config.capUpdate == true %}
                        {% set updateValue = "'" + desiredState.config.dmlUpdate + "'" %}
                    {% endif %}
                {% endif %}

                {# Stream Append Behavior #}
                {% if streamType == 'TABLE' or streamType == 'VIEW' %} 
                    {% set streamAppendMode = 'APPEND_ONLY = FALSE' %}
                    {% set changesClauseMode = 'CHANGES(information => default)' %}
                    {% set updateStreamFilter = '' %}
                    {% set insertStreamFilter = '(metadata$action = \'INSERT\' and metadata$isupdate = false)' %}
                    {% if desiredState.config.capUpdate == true %}
                        {% set updateStreamFilter = ' OR (metadata$action = \'INSERT\' and metadata$isupdate = true)' %}
                    {% endif %}
                    {% set deleteStreamFilter = ' OR (metadata$action = \'DELETE\' and metadata$isupdate = false)' %}
                    {% set whereStreamFilter = 'WHERE (' + insertStreamFilter + updateStreamFilter + deleteStreamFilter + ')' %}
                    {% set andStreamFilter = 'AND (' + insertStreamFilter + updateStreamFilter + deleteStreamFilter + ')' %}
                    {% set identifyDefaultInsertRow = 'WHEN ' + targetTableDmlIdentifierColumnQuotes + ' = ' + insertValue + ' OR ' + insertStreamFilter + ' THEN ' + insertValue %}
                    {% set identifyDefaultDeleteRow = ' WHEN ' + targetTableDmlIdentifierColumnQuotes + ' = ' + deleteValue + deleteStreamFilter + ' THEN ' + deleteValue %}
                    {% set identifyDefaultUpdateRow = '' %}
                    {% if desiredState.config.capUpdate == true %}
                        {% set identifyDefaultUpdateRow = ' WHEN ' + targetTableDmlIdentifierColumnQuotes + ' = ' + updateValue + updateStreamFilter + ' THEN ' + updateValue %}
                    {% endif %}

                    {% set identifyDefaultStreamDeletedRow = 'CASE ' + identifyDefaultInsertRow + identifyDefaultDeleteRow + identifyDefaultUpdateRow + ' END' %}
                    {% set identifyDefaultStreamDeletedRowLoadFlag = 'CASE WHEN (CASE ' + identifyDefaultInsertRow + identifyDefaultDeleteRow + identifyDefaultUpdateRow + ' END) = ' + deleteValue + ' THEN 1 ELSE 0 END' %}
                {% else %}
                    {% set streamAppendMode = '' %}
                {% endif %}

                {# Stream Initial Row Behavior #}
                {% if streamType == 'TABLE' or streamType == 'VIEW' %} 
                    {% if desiredState.config.initialRows == true %} 
                        {% set streamInitialRowsMode = 'SHOW_INITIAL_ROWS = TRUE' %}
                    {% else %} 
                        {% set streamInitialRowsMode = 'SHOW_INITIAL_ROWS = FALSE' %}
                    {% endif %}
                {% else %}
                    {% set streamInitialRowsMode = '' %}
                {% endif %}

                {# Stream Insert Only Behavior #}
                {% if streamType == 'EXTERNAL TABLE' %} 
                    {% if desiredState.config.insertOnly == true %} 
                        {% set streamInsertOnlyMode = 'INSERT_ONLY = TRUE' %}
                    {% else %} 
                        {% set streamInsertOnlyMode = 'INSERT_ONLY = FALSE' %}
                    {% endif %}
                {% else %}
                    {% set streamInsertOnlyMode = '' %}
                {% endif %}

                {# Hybrid View Info #}
                {# View created in same schema as Target Table #}
                {% set targetHybridViewDatabase = targetTableDatabase %} 
                {% set targetHybridViewSchema = targetTableSchema %} 
                {% set targetHybridViewName = desiredState.node.name  %}
                {% set fullyQualifiedHybridViewName = targetHybridViewDatabase + '.' + targetHybridViewSchema + '."' + targetHybridViewName + '"' %}

                {# Task Info #}
                {% set taskName = desiredState.node.name + '_TASK'  %}
                {%- set fullyQualifiedTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + taskName + '"' -%} 

                {# Task Type #}
                {%- if desiredState.config.schedulingMode == 'Warehouse Task' -%} 
                    {%- set taskType = 'WAREHOUSE = ' + desiredState.config.whName -%} 
                {%- else -%}
                    {%- set taskType = 'USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE = ' + desiredState.config.serverlessSize -%} 
                {%- endif -%}

                {# Schedule Type #}
                {%- if desiredState.config.schedulePeriodOption == 'Minutes' -%} 
                    {%- set nsVariables.taskWhenRun = 'SCHEDULE = ' + "'" + desiredState.config.schedulePeriod + ' MINUTE' + "'" -%} 
                {% elif desiredState.config.schedulePeriodOption == 'CRON' %}
                    {%- set nsVariables.taskWhenRun = 'SCHEDULE = ' + "'" + 'USING CRON ' + desiredState.config.scheduleCRON %}
                {%- else -%}
                    {%- set nsVariables.taskWhenRun = 'AFTER ' -%}
                    {%- set predecessorTasks = (desiredState.config.predTask).split(",") -%}

                    {%- for p in predecessorTasks -%}
                        {%- set nsVariables.taskWhenRun = nsVariables.taskWhenRun + targetTableDatabase + '.' + targetTableSchema + '.' + p -%}
                        {%- if not loop.last -%} 
                            {%- set nsVariables.taskWhenRun = nsVariables.taskWhenRun + ',' -%}
                        {%- endif %}
                    {% endfor %}    
                {%- endif -%}

                {# When Stream has data logic #}
                {%- if desiredState.config.flagSrcStream == true -%} 
                    {%- set streamPoll = "WHEN SYSTEM$STREAM_HAS_DATA('" + fullyQualifiedStreamName + "')" -%} 
                {%- endif -%}

                {{ stage('Create Stream') }}
                CREATE OR REPLACE STREAM {{ fullyQualifiedStreamName }}
                    ON {{ streamType }} {{ streamSourceObjectName }}
                    {{ streamAppendMode }}
                    {{ streamInitialRowsMode }}
                    {{ streamInsertOnlyMode }}
                    
                {{ stage('Create Target Table') }}
                CREATE OR REPLACE TABLE {{ fullyQualifiedTargetTableName }}
                    (
                    {%- for col in desiredState.columns %}
                            "{{ col.name }}" {{ col.dataType }}
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                            {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                    )

                {% if desiredState.config.initialRows == true %}
                    {{ stage('Target Table Initial Load') }}
                    INSERT INTO {{ fullyQualifiedTargetTableName }}
                    SELECT
                    {%- for col in desiredState.columns %}
                        "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                    FROM (SELECT {%- for col in desiredState.columns %}
                                    {% if col.name == targetTableMergeUpdateColumn %}
                                        {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                    {% else %}
                                        "{{ col.name }}" as "{{ col.name }}"
                                    {% endif %}
                                    {%- if not loop.last -%}, {% endif %}
                                {%- endfor %}
                                {% if desiredState.config.softDeleteFlag == false %}
                                    ,{{ identifyDefaultStreamDeletedRowLoadFlag }} as load_flag
                                {% endif %}
                        FROM {{ fullyQualifiedStreamName }}
                        QUALIFY {{ nsVariables.rowNumber }} = 1)
                        {% if desiredState.config.softDeleteFlag == false %}
                            WHERE load_flag = 1
                        {% endif %}
                {% endif %}

                {{ stage('Create Hybrid View') }}
                CREATE OR REPLACE VIEW {{ fullyQualifiedHybridViewName }} (
                    {%- for col in desiredState.columns %}
                        "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {%- endfor %} ) AS

                {% if desiredState.config.softDeleteFlag == true and desiredState.config.retainLastNonDeleteFlag == false %}
                    /* SOFT_DELETE = true RETAIN_LAST_NON_DELETE = false */
                    WITH delta AS 
                    (
                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% elif col.name == targetTableDmlIdentifierColumn %}
                                    {{ identifyDefaultStreamDeletedRow }} as "{{ col.name }}"
                                {% else %}
                                    "{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM {{ fullyQualifiedSourceTableName }}
                    {{ changesClauseMode }}
                    {{ changesClauseAt }}
                    {{ whereStreamFilter }}
                    QUALIFY {{ nsVariables.rowNumber }} = 1)

                    SELECT {%- for col in desiredState.columns %}
                                "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM {{ fullyQualifiedTargetTableName }} a
                    WHERE NOT EXISTS (SELECT 1
                                    FROM delta d
                                    WHERE {%- for col in (nsVariables.partition).split(",") %}
                                                a.{{ col }} = d.{{ col }}
                                                {% if not loop.last -%}AND {% endif %}
                                            {%- endfor %})
                    UNION ALL
                    SELECT {%- for col in desiredState.columns %}
                                "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM delta d

                {% elif desiredState.config.softDeleteFlag == false and desiredState.config.retainLastNonDeleteFlag == false %} 
                    /* SOFT_DELETE = false RETAIN_LAST_NON_DELETE = false */
                    WITH delta AS 
                    (
                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% elif col.name == targetTableDmlIdentifierColumn %}
                                    {{ identifyDefaultStreamDeletedRow }} as "{{ col.name }}"
                                {% else %}
                                    "{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                , 
                            {%- endfor %}
                                CASE WHEN {{ identifyDefaultStreamDeletedRow }} = {{ deleteValue }} THEN 0 ELSE 1 END AS LOAD_FLAG
                    FROM {{ fullyQualifiedSourceTableName }}
                    {{ changesClauseMode }}
                    {{ changesClauseAt }}
                    {{ whereStreamFilter }}
                    QUALIFY {{ nsVariables.rowNumber }} = 1)

                    SELECT {%- for col in desiredState.columns %}
                                "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM {{ fullyQualifiedTargetTableName }} a
                    WHERE NOT EXISTS (SELECT 1
                                    FROM delta d
                                    WHERE {%- for col in (nsVariables.partition).split(",") %}
                                                a.{{ col }} = d.{{ col }}
                                                {% if not loop.last -%}AND {% endif %}
                                            {%- endfor %})
                    UNION ALL
                    SELECT {%- for col in desiredState.columns %}
                                "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM delta d
                    WHERE LOAD_FLAG = 1

                {% elif desiredState.config.softDeleteFlag == true and desiredState.config.retainLastNonDeleteFlag == true %} 
                    /* SOFT_DELETE = true RETAIN_LAST_NON_DELETE = true */
                    WITH 
                    a AS (
                    SELECT {%- for col in desiredState.columns %}
                                {%- if col.name == targetTableMergeUpdateColumn -%}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% elif col.name == targetTableDmlIdentifierColumn %}
                                    {{ identifyDefaultStreamDeletedRow }} as "{{ col.name }}_CALC"
                                {%- else -%}
                                    "{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {%- endif -%}
                        {%- endfor %}
                    FROM {{ fullyQualifiedSourceTableName }}
                    {{ changesClauseMode }}
                    {{ changesClauseAt }}
                    WHERE "{{ targetTableDmlIdentifierColumn }}_CALC" != {{ deleteValue }}
                    QUALIFY {{ nsVariables.rowNumber }} = 1),

                    d AS (
                    SELECT {%- for col in desiredState.columns %}
                                {%- if col.name == targetTableMergeUpdateColumn -%}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% elif col.name == targetTableDmlIdentifierColumn %}
                                    {{ identifyDefaultStreamDeletedRow }} as "{{ col.name }}_CALC"
                                {%- else -%}
                                    "{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {%- endif -%}
                        {%- endfor %}
                    FROM {{ fullyQualifiedSourceTableName }}
                    {{ changesClauseMode }}
                    {{ changesClauseAt }}
                    WHERE "{{ targetTableDmlIdentifierColumn }}_CALC" = {{ deleteValue }}
                    QUALIFY {{ nsVariables.rowNumber }} = 1),

                    ods_d as (
                    SELECT {% for col in desiredState.columns -%}
                                {% if col.name == targetTableMergeUpdateColumn -%}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% elif col.name in nsVariables.orderBy  -%} 
                                    d."{{ col.name }}" as "{{ col.name }}"
                                {% elif col.name == targetTableDmlIdentifierColumn  -%} 
                                    {{ deleteValue }} as "{{ col.name }}"
                                {% else -%}
                                    a."{{ col.name }}" as "{{ col.name }}"
                                {% endif -%}
                                {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM {{ fullyQualifiedTargetTableName }} a
                    INNER JOIN (
                            SELECT {%- for col in nsVariables.tableKeySort %}
                                            "{{ col }}",
                                    {%- endfor %}
                                            {{ identifyDefaultStreamDeletedRow }} as "{{ col }}"
                                FROM {{ fullyQualifiedSourceTableName }}
                                {{ changesClauseMode }}
                                {{ changesClauseAt }}
                                WHERE {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}) d
                    ON 
                    {% for col in nsVariables.tableKey %}
                        a."{{col}}" = d."{{col}}"
                        {%- if not loop.last -%} AND {% endif %}
                        {%- if loop.last -%} ) {% endif %}
                    {% endfor %}

                    SELECT {%- for col in desiredState.columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% elif col.name in nsVariables.orderBy  %} 
                                    coalesce(d."{{ col.name }}", a."{{ col.name }}") as "{{ col.name }}"
                                {% elif col.name == targetTableDmlIdentifierColumn  %} 
                                    coalesce(d."{{targetTableDmlIdentifierColumn}}_CALC", a."{{targetTableDmlIdentifierColumn}}_CALC") as "{{ col.name }}"
                                {% else %}
                                    a."{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM a
                    LEFT OUTER JOIN d
                    ON 
                        {%- for col in nsVariables.tableKey %}
                                a."{{ col }}" = d."{{ col }}" AND
                        {%- endfor %}
                        {{ nsVariables.hybridMergeSortFilter | replace('alias','d') }} > {{ nsVariables.hybridMergeSortFilter | replace('alias','a') }}
                    UNION ALL
                    SELECT {%- for col in desiredState.columns %}
                            "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM ods_d
                    UNION ALL
                    SELECT {%- for col in desiredState.columns %}
                                "{{ col.name }}"
                                {%- if not loop.last -%}, {% endif %}
                            {%- endfor %}
                    FROM {{ fullyQualifiedTargetTableName }} d
                    WHERE NOT EXISTS (
                        SELECT 1
                        FROM {{ fullyQualifiedSourceTableName }}
                        {{ changesClauseMode }}
                        {{ changesClauseAt }} a
                        WHERE 
                        {%- for col in nsVariables.tableKey %}
                                a."{{ col }}" = d."{{ col }}"
                            {%- if not loop.last -%} AND {% endif %}
                        {%- endfor %}
                        {{ andStreamFilter }})

                {% elif desiredState.config.softDeleteFlag == false and desiredState.config.retainLastNonDeleteFlag == true %} 
                    /* SOFT_DELETE = false RETAIN_LAST_NON_DELETE = true */
                    WITH 
                    a AS (
                    SELECT {%- for col in desiredState.columns %}
                                {%- if col.name == targetTableMergeUpdateColumn -%}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% elif col.name == targetTableDmlIdentifierColumn %}
                                    {{ identifyDefaultStreamDeletedRow }} as "{{ col.name }}_CALC"
                                {%- else -%}
                                    "{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {%- endif -%}
                        {%- endfor %}
                    FROM {{ fullyQualifiedSourceTableName }}
                    {{ changesClauseMode }}
                    {{ changesClauseAt }}
                    WHERE "{{ targetTableDmlIdentifierColumn }}_CALC" != {{ deleteValue }}
                    QUALIFY {{ nsVariables.rowNumber }} = 1),

                    d AS (
                    SELECT {%- for col in desiredState.columns %}
                                {%- if col.name == targetTableMergeUpdateColumn -%}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% elif col.name == targetTableDmlIdentifierColumn %}
                                    {{ identifyDefaultStreamDeletedRow }} as "{{ col.name }}_CALC"
                                {%- else -%}
                                    "{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {%- endif -%}
                        {%- endfor %}
                    FROM {{ fullyQualifiedSourceTableName }}
                    {{ changesClauseMode }}
                    {{ changesClauseAt }}
                    WHERE "{{ targetTableDmlIdentifierColumn }}_CALC" = {{ deleteValue }}
                    QUALIFY {{ nsVariables.rowNumber }} = 1),

                    ods_d as (
                    SELECT {% for col in desiredState.columns -%}
                                {% if col.name == targetTableMergeUpdateColumn -%}
                                    {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% elif col.name in nsVariables.orderBy  -%} 
                                    d."{{ col.name }}" as "{{ col.name }}"
                                {% elif col.name == targetTableDmlIdentifierColumn  -%} 
                                    {{ deleteValue }} as "{{ col.name }}"
                                {% else -%}
                                    a."{{ col.name }}" as "{{ col.name }}"
                                {% endif -%}
                                {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM {{ fullyQualifiedTargetTableName }} a
                    INNER JOIN (
                            SELECT {%- for col in nsVariables.tableKeySort %}
                                            "{{ col }}",
                                    {%- endfor %}
                                            {{ identifyDefaultStreamDeletedRow }} as "{{ col }}"
                                FROM {{ fullyQualifiedSourceTableName }}
                                {{ changesClauseMode }}
                                {{ changesClauseAt }}
                                WHERE {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}) d
                    ON 
                    {% for col in nsVariables.tableKey %}
                        a."{{col}}" = d."{{col}}"
                        {%- if not loop.last -%} AND {% endif %}
                        {%- if loop.last -%} ) {% endif %}
                    {% endfor %}

                    SELECT 
                    {%- for col in desiredState.columns %}
                        "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                    FROM (
                        SELECT {%- for col in desiredState.columns %}
                                    {% if col.name == targetTableMergeUpdateColumn %}
                                        {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                    {% elif col.name in nsVariables.orderBy  %} 
                                        coalesce(d."{{ col.name }}", a."{{ col.name }}") as "{{ col.name }}"
                                    {% elif col.name == targetTableDmlIdentifierColumn  %} 
                                        coalesce(d."{{ targetTableDmlIdentifierColumn }}_CALC", a."{{ targetTableDmlIdentifierColumn }}_CALC") as "{{ col.name }}"
                                    {% else %}
                                        a."{{ col.name }}" as "{{ col.name }}"
                                    {% endif %}
                                    , 
                            {%- endfor %}
                                    CASE WHEN {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }} THEN 0 ELSE 1 END AS LOAD_FLAG
                        FROM a
                        LEFT OUTER JOIN d
                        ON 
                            {%- for col in nsVariables.tableKey %}
                                    a."{{ col }}" = d."{{ col }}" AND
                            {%- endfor %}
                            {{ nsVariables.hybridMergeSortFilter | replace('alias','d') }} > {{ nsVariables.hybridMergeSortFilter | replace('alias','a') }}
                    )
                    WHERE LOAD_FLAG = 1
                    UNION ALL
                    SELECT {%- for col in desiredState.columns %}
                            "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM ods_d
                    UNION ALL
                    SELECT {%- for col in desiredState.columns %}
                                "{{ col.name }}"
                                {%- if not loop.last -%}, {% endif %}
                            {%- endfor %}
                    FROM {{ fullyQualifiedTargetTableName }} d
                    WHERE NOT EXISTS (
                        SELECT 1
                        FROM {{ fullyQualifiedSourceTableName }}
                        {{ changesClauseMode }}
                        {{ changesClauseAt }} a
                        WHERE 
                        {%- for col in nsVariables.tableKey %}
                                a."{{ col }}" = d."{{ col }}"
                            {%- if not loop.last -%} AND {% endif %}
                        {%- endfor %}
                        {{ andStreamFilter }})

                {% endif %}

                {%- if desiredState.config.schedulePeriodOption == 'Predecessor' -%} 
                    {%- set fullyQualifiedRootTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + desiredState.config.rootTask + '"' -%} 
                    {{ stage('Suspend Root Task', true, "sql") }}
                    ALTER TASK {{ fullyQualifiedRootTaskName }} SUSPEND
                {%- endif -%}

                {{ stage('Create Task') }}
                CREATE OR REPLACE TASK 
                    {{ fullyQualifiedTaskName }} 
                    {{ taskType}} 
                    {{ nsVariables.taskWhenRun }} 
                    {% if nsVariables.poll != 'WHEN ' %} {{ nsVariables.poll }} {% endif %}
                AS 
                MERGE INTO {{ fullyQualifiedTargetTableName }} a
                USING (SELECT
                {%- for col in desiredState.columns %}
                            {% if col.name == targetTableMergeUpdateColumn %}
                                {{ desiredState.sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                            {% else %}
                                "{{ col.name }}" as "{{ col.name }}"
                            {% endif %}
                            {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                FROM {{ fullyQualifiedStreamName }}
                {{ whereStreamFilter }}
                QUALIFY {{ nsVariables.rowNumber }} = 1) d
                ON 
                {% for col in nsVariables.tableKey %}
                    a."{{col}}" = d."{{col}}"
                    {%- if not loop.last -%} AND {% endif %}
                {% endfor %}

                WHEN NOT MATCHED and d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ insertValue }} THEN INSERT (
                    {% for col in desiredState.columns %}
                        a."{{ col.name }}"
                        {% if not loop.last %}, {% endif -%}
                    {%- endfor -%}
                    )
                VALUES (
                    {% for col in desiredState.columns %}
                        d."{{ col.name }}"
                        {% if not loop.last %}, {%- endif -%}
                    {%- endfor -%}
                    )
                {% if desiredState.config.capUpdate == true %}
                    WHEN NOT MATCHED and d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ updateValue }} THEN INSERT (
                        {% for col in desiredState.columns %}
                            a."{{ col.name }}"
                            {% if not loop.last %}, {% endif -%}
                        {%- endfor -%}
                        )
                    VALUES (
                        {% for col in desiredState.columns %}
                            d."{{ col.name }}"
                            {% if not loop.last %}, {%- endif -%}
                        {%- endfor -%}
                        )
                {% endif %}
                WHEN NOT MATCHED AND d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }} AND /* softDeleteFlag True */ {{ desiredState.config.softDeleteFlag }} = True THEN INSERT (
                    {% for col in desiredState.columns %}
                        a."{{ col.name }}"
                        {% if not loop.last %}, {% endif -%}
                    {%- endfor -%}
                    )
                VALUES (
                    {% for col in desiredState.columns %}
                        d."{{ col.name }}"
                        {% if not loop.last %}, {%- endif -%}
                    {%- endfor -%}
                    )
                {% if desiredState.config.capUpdate == true %}
                    /* Update DML value selected */
                    WHEN MATCHED AND d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ updateValue }} THEN UPDATE SET
                        {% for col in targetTableColumnNamesUpdate %}
                            a."{{ col }}" = d."{{ col }}"
                            {% if not loop.last %}, {% endif -%}
                        {%- endfor -%}
                {% endif %}
                WHEN MATCHED AND d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ insertValue }} THEN UPDATE SET
                    {% for col in targetTableColumnNamesUpdate %}
                        a."{{ col }}" = d."{{ col }}"
                        {% if not loop.last %}, {% endif -%}
                    {%- endfor -%}
                {% if desiredState.config.softDeleteFlag == true %}
                    /* Soft Delete */
                    WHEN MATCHED AND d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}
                    THEN UPDATE SET
                        {% for col in (targetTableColumnNamesUpdate) %}
                            {% if (col in (targetTableMergeUpdateColumn, targetTableDmlIdentifierColumn)) or col in (nsVariables.sortKey) %}
                                a."{{ col }}" = d."{{ col }}"
                                {% if not loop.last %}, {% endif -%}
                            {% endif %}
                        {%- endfor -%}
                {% else %}
                    /* Hard Delete */
                    WHEN MATCHED AND d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}
                    THEN DELETE
                {% endif %}

                {%- if desiredState.config.schedulePeriodOption != 'Predecessor' -%} 
                    {{ stage('Resume Task', true, "sql") }}
                    ALTER TASK {{ fullyQualifiedTaskName }} RESUME;
                {%- endif -%}

            {% elif currentState != undefined and desiredState == undefined %}

                {# Target Stream Location and Name #}
                {% set streamTargetLocationName = currentState.node.location.name %}
                {% set streamTargetDatabaseName = currentState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='database') | first %}
                {% set streamTargetSchemaName = currentState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='schema') | first %}
                {% set streamName = currentState.node.name + '_STREAM' %}
                {% set fullyQualifiedStreamName = '"' + streamTargetDatabaseName + '"."' + streamTargetSchemaName + '"."' + streamName + '"' %}

                {# Target Table Info #}
                {% set targetTableDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
                {% set targetTableSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
                {% set fullyQualifiedTargetTableName = ref_no_link(currentState.node.location.name, currentState.node.name).replace('DM_VIEW_','DM_TABLE_') %}
                {% set targetTableName = currentState.node.name %}

                {# Hybrid View Info #}
                {# View created in same schema as Target Table #}
                {% set targetHybridViewDatabase = targetTableDatabase %} 
                {% set targetHybridViewSchema = targetTableSchema %} 
                {% set targetHybridViewName = currentState.node.name  %}
                {% set fullyQualifiedHybridViewName = targetHybridViewDatabase + '.' + targetHybridViewSchema + '."' + targetHybridViewName + '"' %}

                {# Task Info #}
                {% set taskName = currentState.node.name + '_TASK'  %}
                {%- set fullyQualifiedTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + taskName + '"' -%} 

                {{ stage('Drop Stream') }}
                DROP STREAM IF EXISTS {{ fullyQualifiedStreamName }}

                {{ stage('Drop Table') }}
                DROP TABLE IF EXISTS {{ fullyQualifiedTargetTableName }}

                {{ stage('Drop View') }}
                DROP VIEW IF EXISTS {{ fullyQualifiedHybridViewName }}

                {%- if currentState.config.schedulingPeriodOption == 'Predecessor' -%} 
                {{ stage('Suspend Root Task', true, "sql") }}
                    ALTER TASK IF EXISTS {{ fullyQualifiedRootTaskName }} SUSPEND
                {{ stage('Drop Current Task', true, "sql") }}
                    DROP TASK IF EXISTS {{ fullyQualifiedTaskName }} 
                {%- else -%}
                {{ stage('Drop Current Task', true, "sql") }}
                    DROP TASK IF EXISTS {{ fullyQualifiedTaskName }} 
                {%- endif -%}

            {%- else -%}

                {{ stage('Nothing to do.') }}
                select 1 = 0

            {% endif %}
        run:
          templateString: ""
    name: Deferred Merge - Delta Stream - v0
    version: 1
  StepType-25:
    id: "25"
    isDisabled: false
    metadata:
      defaultStorageLocation: STG
      error: null
      nodeMetadataSpec: |-
        capitalized: Dynamic Table
        short: DT
        tagColor: '#C4C4C4'
        isDisabled: true
        plural: Dynamic Tables

        config:
          - groupName: Options
            items: 
            - type: toggleButton
              attributeName: selectDistinct
              displayName: Distinct

            - type: multisourceToggle

            - type: overrideSQLToggle

            - displayName: Multi Source Strategy
              attributeName: insertStrategy
              type: dropdownSelector
              default: UNION
              options:
              - "UNION"
              - "UNION ALL" 
              isRequired: true
              enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - groupName: Hidden Config
            enableIf: "false"
            items:
            - displayName: Type
              type: materializationSelector
              default: Dynamic Table
              options:
              - Dynamic Table
              isRequired: false
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
                
                {{ node.override.create.script }}

            {% else %}
                {{ stage('Create Dynamic Table') }}
                CREATE OR REPLACE DYNAMIC TABLE {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns -%}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {%- endif %}
                    {% endfor -%}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
                AS
                {% for source in sources -%}
                    SELECT {% if config.selectDistinct %} DISTINCT {% endif -%}
                    {%- for col in source.columns -%}
                        {{ get_source_transform(col) }} AS "{{ col.name -}}"
                        {%- if not loop.last -%}, {%- endif %}
                    {% endfor -%}

            {{- source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}
            {% endif %}
        run:
          templateString: ""
    name: Dynamic Table
    version: 1
  StepType-26:
    id: "26"
    isDisabled: true
    metadata:
      defaultStorageLocation: STG
      error: null
      nodeMetadataSpec: |
        capitalized: Copy of View
        short: V
        tagColor: '#C4C4C4'
        isDisabled: true
        plural: Views

        config:
          - groupName: Options
            items: 
            - type: materializationSelector
              options:
                - view
              default: view
              isRequired: true

            - type: toggleButton
              attributeName: selectDistinct
              displayName: Distinct

            - type: multisourceToggle

            - type: overrideSQLToggle

            - displayName: Multi Source Strategy
              attributeName: insertStrategy
              type: dropdownSelector
              default: UNION
              options:
              - "UNION"
              - "UNION ALL" 
              isRequired: true
              enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

        mappingColumns:
          - headerName: Column Type
            attributeName: columnType
            type: textBox
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
                
                {{ node.override.create.script }}

            {% else %}
                {{ stage('Create View') }}
                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns -%}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {%- endif %}
                    {% endfor -%}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description }}'{% endif %}
                AS
                {% for source in sources -%}
                    SELECT {% if config.selectDistinct %} DISTINCT {% endif -%}
                    {%- for col in source.columns -%}
                        {{ get_source_transform(col) }} AS "{{ col.name -}}"
                        {%- if not loop.last -%}, {%- endif %}
                    {% endfor -%}

            {{- source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}
            {% endif %}
        run:
          templateString: ""
    name: Copy of View
    version: 1
  StepType-28:
    id: "28"
    isDisabled: true
    metadata:
      defaultStorageLocation: STG
      error: null
      nodeMetadataSpec: |
        capitalized: Copy of Stage
        short: STG
        plural: Stages
        tagColor: '#2EB67D'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            - view
            isRequired: true

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}" 

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"
            
          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: INSERT
            options:
            - "INSERT"
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
            	
            	{{ node.override.create.script }}

            {% elif node.materializationType == 'table' %}
            	{{ stage('Create Stage Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}

            {% endif %}
        run:
          templateString: |2

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
            	
            	
            		{% if config.truncateBefore %}
            	
            			{{ stage('Truncate Stage Table') }}
            			TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            	
            		{% endif %}
            	
            	
            		{% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
            			{{ stage( config.insertStrategy + ' Sources' | string ) }}
            			INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            		{% endif %}
            	
            	
            		{% for source in sources %}
            	
            			{% if config.insertStrategy == 'INSERT' %}
            				{{ stage('Insert ' + source.name | string ) }}
            	
            				INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in source.columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            			{% endif %}
            	
            			SELECT
            			{% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            	
            			{{ source.join }}
            	
            			{% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
            				{{config.insertStrategy}}
            			{% endif %}
            	
            		{% endfor %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Copy of Stage
    version: 1
  StepType-29:
    id: "29"
    isDisabled: true
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Stream and Insert or Merge
        short: SIM
        tagColor: black
        plural: Streams and Merges

        deployStrategy: advanced

        config:
        - groupName: Stream Options
          items:
          - displayName: Source Object
            attributeName: sourceType
            type: dropdownSelector
            default: Table
            options:
              - Table
              - External Table
              - View
            isRequired: true

          - displayName: Append Only Stream
            attributeName: appendOnly
            type: toggleButton
            default: false
            isRequired: true
            enableIf: "{% if config.sourceType == 'Table' or config.sourceType == 'View' %} true {% else %} false {% endif %}"

          - displayName: Show Initial Rows
            attributeName: initialRows
            type: toggleButton
            default: true
            isRequired: true
            enableIf: "{% if config.sourceType == 'Table' or config.sourceType == 'View' %} true {% else %} false {% endif %}"

          - displayName: Insert Only
            attributeName: insertOnly
            type: toggleButton
            default: false
            isRequired: true
            enableIf: "{% if config.sourceType == 'External Table' %} true {% else %} false {% endif %}"

        - groupName: Target Loading Options
          items:
          - displayName: Load Type
            attributeName: loadType
            type: dropdownSelector
            default: Insert
            options:
              - Insert
              - Merge
            isRequired: true

          - type: tabular
            displayName: 'Table Key(s)'
            attributeName: partitionBy
            columns:
          
            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: partColName
               isRequired: false
                
            isRequired: false
            enableIf: "{% if config.loadType == 'Merge' %} true {% else %} false {% endif %}"

          - type: tabular
            displayName: 'Record Date / Timestamp'
            attributeName: orderBy
            columns:
          
            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: colName
               isRequired: false
            
            -  type: dropdownSelector
               displayName: Sort Order
               attributeName: sortOrd
               default: desc
               options:
               - desc
               - asc
               isRequired: false
            
            isRequired: false
            enableIf: "{% if config.loadType == 'Merge' %} true {% else %} false {% endif %}"

        - groupName: Sceduling Options
          items:
          - displayName: Sceduling Options
            attributeName: schedulingMode
            type: dropdownSelector
            default: Warehouse Task
            options:
              - Warehouse Task
              - Serverless Task
            isRequired: true

          - displayName: When Source Stream has Data Flag
            attributeName: flagSrcStream
            type: toggleButton
            isRequired: true

          - displayName: Select Warehouse on which to run task
            attributeName: whName
            type: textBox
            default: '<WAREHOUSE_NAME>'
            isRequired: false
            enableIf: "{% if config.schedulingMode == 'Warehouse Task' %} true {% else %} false {% endif %}"

          - displayName: Select initial serverless Warehouse size
            attributeName: serverlessSize
            type: dropdownSelector
            default: 'MEDIUM'
            options:
              - XSMALL
              - SMALL
              - MEDIUM
              - LARGE
              - XLARGE
              - XXLARGE
            isRequired: false
            enableIf: "{% if config.schedulingMode == 'Serverless Task' %} true {% else %} false {% endif %}"

          - displayName: Task Schedule
            attributeName: schedulePeriodOption
            type: dropdownSelector
            default: Minutes
            options:
              - Minutes
              - CRON
              - Predecessor
            isRequired: TRUE

          - displayName: Enter task schedule using minutes
            attributeName: schedulePeriod
            type: textBox
            default: '60'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Minutes' %} true {% else %} false {% endif %}"

          - displayName: Enter task schedule using CRON
            attributeName: scheduleCRON
            type: textBox
            default: '5 0-23 * * * America/Los_Angeles'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'CRON' %} true {% else %} false {% endif %}"

          - displayName: Enter predecessor task(s) seperated by a comma 
            attributeName: predTask
            type: textBox
            default: ""
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Predecessor' %} true {% else %} false {% endif %}"

          - displayName: Enter root task name
            attributeName: rootTask
            type: textBox
            default: ""
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Predecessor' %} true {% else %} false {% endif %}"

        - groupName: "Pre/Post SQL"
          items: 
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
      templates:
        create:
          templateString: |+
            {% if (currentState == undefined and desiredState != undefined) or (currentState != undefined and desiredState != undefined ) %}

            {# Source Object Location and Name #}
            {% set sourceStorageLocation = desiredState.sources[0].dependencies[0].node.location.name %}
            {% set sourceDatabaseName = desiredState.storageLocations | selectattr('name', 'equalto', sourceStorageLocation) | map(attribute='database') | first %}
            {% set sourceSchemaName = desiredState.storageLocations | selectattr('name', 'equalto', sourceStorageLocation) | map(attribute='schema') | first %}
            {% set sourceTableName = desiredState.sources[0].dependencies[0].node.name %}
            {% set fullyQualifiedSourceTableName = '"' + sourceDatabaseName + '"."' + sourceSchemaName + '"."' + sourceTableName + '"' %}

            {# Target Stream Location and Name #}
            {% set streamTargetLocationName = desiredState.node.location.name %}
            {% set streamTargetDatabaseName = desiredState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='database') | first %}
            {% set streamTargetSchemaName = desiredState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='schema') | first %}
            {% set streamName = desiredState.node.name + '_STREAM' %}
            {% set fullyQualifiedStreamName = '"' + streamTargetDatabaseName + '"."' + streamTargetSchemaName + '"."' + streamName + '"' %}

            {# Target Table Info #}
            {% set targetTableDatabase = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[0] %} 
            {% set targetTableSchema = ref_no_link(desiredState.node.location.name, desiredState.node.name).split('.')[1] %} 
            {% set fullyQualifiedTargetTableName = ref_no_link(desiredState.node.location.name, desiredState.node.name) %}
            {% set targetTableName = desiredState.node.name %}

            {# Stream Type #}
            {% if desiredState.config.sourceType == 'Table' %} 
                {% set streamType = 'TABLE' %}
                {% set streamSourceObjectName = fullyQualifiedSourceTableName %}
            {% elif desiredState.config.sourceType == 'External Table' %} 
                {% set streamType = 'EXTERNAL TABLE' %}
                {% set streamSourceObjectName = fullyQualifiedSourceTableName %}
            {% elif desiredState.config.sourceType == 'Directory Table' %} 
                {% set streamType = 'STAGE' %}
                {% set streamSourceObjectName = desiredState.config.stageName %}
            {% else %} 
                {% set streamType = 'VIEW' %}
                {% set streamSourceObjectName = fullyQualifiedSourceTableName %}
            {% endif %}

            {# Stream Append Behavior #}
            {% if streamType == 'TABLE' or streamType == 'VIEW' %} 
                {% if desiredState.config.appendOnly == true %} 
                    {% set streamAppendMode = 'APPEND_ONLY = TRUE' %}
                {% else %} 
                    {% set streamAppendMode = 'APPEND_ONLY = FALSE' %}
                {% endif %}
            {% else %}
                {% set streamAppendMode = '' %}
            {% endif %}

            {# Stream Initial Row Behavior #}
            {% if streamType == 'TABLE' or streamType == 'VIEW' %} 
                {% if desiredState.config.initialRows == true %} 
                    {% set streamInitialRowsMode = 'SHOW_INITIAL_ROWS = TRUE' %}
                {% else %} 
                    {% set streamInitialRowsMode = 'SHOW_INITIAL_ROWS = FALSE' %}
                {% endif %}
            {% else %}
                {% set streamInitialRowsMode = '' %}
            {% endif %}

            {# Stream Insert Only Behavior #}
            {% if streamType == 'EXTERNAL TABLE' %} 
                {% if desiredState.config.insertOnly == true %} 
                    {% set streamInsertOnlyMode = 'INSERT_ONLY = TRUE' %}
                {% else %} 
                    {% set streamInsertOnlyMode = 'INSERT_ONLY = FALSE' %}
                {% endif %}
            {% else %}
                {% set streamInsertOnlyMode = '' %}
            {% endif %}

            {# Task Info #}
            {% set taskName = desiredState.node.name + '_TASK'  %}
            {%- set fullyQualifiedTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + taskName + '"' -%} 

            {% set tableColumnIds = desiredState.columns | map(attribute='id') | list %}
            {% set tableColumnNames = desiredState.columns | map(attribute='name') | list %}

            {%- if desiredState.config.schedulePeriodOption == 'Predecessor' -%} 
                {%- set fullyQualifiedRootTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + desiredState.config.rootTask + '"' -%} 
                {{ stage('Suspend Root Task') }}
                ALTER TASK {{ fullyQualifiedRootTaskName }} SUSPEND
            {%- endif -%}

            {{ stage('Create Stream') }}
            CREATE OR REPLACE STREAM {{ fullyQualifiedStreamName }}
                ON {{ streamType }} {{ streamSourceObjectName }}
                {{ streamAppendMode }}
                {{ streamInitialRowsMode }}
                {{ streamInsertOnlyMode }}
                
            {{ stage('Create Target Table') }}
            CREATE OR REPLACE TABLE {{ fullyQualifiedTargetTableName }}
                (
                {%- for col in desiredState.columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                {%- endfor %}
                )

            {{ stage('Create Task') }}
                {# Set Namespace Variables #}
                {% set nsVariables = namespace(taskWhenRun="") %}
                {% set nsVariables = namespace(partition="") %}
                {% set nsVariables = namespace(orderBy="") %}
                {% set nsVariables = namespace(rowNumber="") %}
                {% set nsVariables = namespace(tableKey=[]) %}

                {# Task Type #}
                {%- if desiredState.config.schedulingMode == 'Warehouse Task' -%} 
                    {%- set taskType = 'WAREHOUSE = ' + desiredState.config.whName -%} 
                {%- else -%}
                    {%- set taskType = 'USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE = ' + desiredState.config.serverlessSize -%} 
                {%- endif -%}

                {# Schedule Type #}
                {%- if desiredState.config.schedulePeriodOption == 'Minutes' -%} 
                    {%- set nsVariables.taskWhenRun = 'SCHEDULE = ' + "'" + desiredState.config.schedulePeriod + ' MINUTE' + "'" -%} 
                {% elif desiredState.config.schedulePeriodOption == 'CRON' %}
                    {%- set nsVariables.taskWhenRun = 'SCHEDULE = ' + "'" + 'USING CRON ' + desiredState.config.scheduleCRON %}
                {%- else -%}
                    {%- set nsVariables.taskWhenRun = 'AFTER ' -%}
                    {%- set predecessorTasks = (desiredState.config.predTask).split(",") -%}

                    {%- for p in predecessorTasks -%}
                        {%- set nsVariables.taskWhenRun = nsVariables.taskWhenRun + targetTableDatabase + '.' + targetTableSchema + '.' + p -%}
                        {%- if not loop.last -%} 
                            {%- set nsVariables.taskWhenRun = nsVariables.taskWhenRun + ',' -%}
                        {%- endif %}
                    {% endfor %}    
                {%- endif -%}

                {# When Stream has data logic #}
                {%- if desiredState.config.flagSrcStream == true -%} 
                    {%- set streamPoll = "WHEN SYSTEM$STREAM_HAS_DATA('" + fullyQualifiedStreamName + "')" -%} 
                {%- endif -%}
                
                {# Merge partition by and order by #}
                {%- if desiredState.config.loadType == 'Merge' -%} 
                    {% set tableColumnNamesUpdate = tableColumnNames | reject('in', desiredState.config.partitionBy.get('items') | map(attribute='partColName.name')) | list %}
                    
                    {% for i in desiredState.config.partitionBy.get('items') %}
                        {%- if loop.first -%}
                            {% set nsVariables.partition = '"' + i.partColName.name + '"' %}
                        {% else %}
                            {% set nsVariables.partition = nsVariables.partition + ', "' + i.partColName.name + '"' %}
                        {%- endif -%}

                        {% set tableColumnNamesUpdate = tableColumnNames | reject('in', i.partColName.name) | list %}

                    {% endfor %}

                    {% for i in desiredState.config.orderBy.get('items') %}
                        {%- if loop.first -%}
                            {% set nsVariables.orderBy = '"' + i.colName.name + '" ' + i.sortOrd %}
                        {% else %}
                            {% set nsVariables.orderBy = nsVariables.orderBy + ', "' + i.colName.name + '" ' + i.sortOrd %}
                        {%- endif -%}
                    {% endfor %}
                    {% set nsVariables.rowNumber = 'ROW_NUMBER() OVER (PARTITION BY ' + nsVariables.partition + ' ORDER BY ' + nsVariables.orderBy + ')' %}

                    {%- set nsVariables.tableKey = desiredState.config.partitionBy.get('items') %}
                    {% set nsVariables.tableKey = nsVariables.tableKey | map(attribute='partColName.name') | list %}
                {%- endif -%}

                CREATE OR REPLACE TASK 
                    {{ fullyQualifiedTaskName }} 
                    {{ taskType}} 
                    {{ nsVariables.taskWhenRun }} 
                    {{ streamPoll }} 
                AS 
                {% if desiredState.config.loadType == 'Insert' -%} 
                INSERT INTO {{ fullyQualifiedTargetTableName }}
                SELECT {% for id in tableColumnIds %}
                        {% set col = desiredState.sources[0].columns | selectattr('id', 'equalto', id) | map(attribute='name') | first -%}
                        {% set columnTransformation = desiredState.sources[0].columns | selectattr('id', 'equalto', id) | map(attribute='transform') | first -%}
                        {%- if columnTransformation == "" -%}
                          "{{ col }}" as "{{ col }}" {%- if not loop.last -%}, {%- endif -%}
                        {%- else -%}
                          {{ columnTransformation | replace(sourceTableName, streamName) }} as "{{ col }}" {%- if not loop.last -%}, {%- endif -%}
                        {%- endif %}
                    {%- endfor %}
                FROM {{ fullyQualifiedStreamName }}
                {% else -%}
                MERGE INTO {{ fullyQualifiedTargetTableName }} tgt USING
                -- Select Statement Preparing Data for Merge
                (SELECT {% for id in tableColumnIds %}
                        {% set col = desiredState.sources[0].columns | selectattr('id', 'equalto', id) | map(attribute='name') | first -%}
                        {% set columnTransformation = desiredState.sources[0].columns | selectattr('id', 'equalto', id) | map(attribute='transform') | first -%}
                        {%- if columnTransformation == "" -%}
                          "{{ col }}" as "{{ col }}" {%- if not loop.last -%}, {%- endif -%}
                        {%- else -%}
                          {{ columnTransformation | replace(sourceTableName, streamName) }} as "{{ col }}" {%- if not loop.last -%}, {%- endif -%}
                        {%- endif %}
                    {%- endfor %}
                 FROM {{ fullyQualifiedStreamName }}
                 QUALIFY {{ nsVariables.rowNumber }} = 1) src
                 -- Join Condition
                 ON {% for col in nsVariables.tableKey -%}
                     src."{{ col }}" = tgt."{{ col }}"
                {% if not loop.last %} AND {% endif %}
                    {%- endfor -%}
                -- What to do if data is matched based on table key
                WHEN MATCHED THEN UPDATE SET 
                    {%- for col in tableColumnNamesUpdate %}
                            tgt."{{ col }}" = src."{{ col }}"
                            {%- if not loop.last -%}, {%- endif %}
                    {%- endfor %}
                -- What to do with new records based on table key
                WHEN NOT MATCHED THEN INSERT 
                    (
                    {%- for col in desiredState.columns -%}
                            "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                    {% endfor %}) 
                VALUES (
                    {%- for col in desiredState.columns -%}
                            src."{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                    {% endfor %})
                {%- endif -%}

            {{ stage('Resume Task') }}
            {%- if desiredState.config.schedulePeriodOption != 'Predecessor' -%} 
                ALTER TASK {{ fullyQualifiedTaskName }} RESUME;
            {%- endif -%}

            {% elif currentState != undefined and desiredState == undefined %}

            {# Source Stream Location and Name #}
            {% set streamTargetLocationName = currentState.node.location.name %}
            {% set streamTargetDatabaseName = currentState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='database') | first %}
            {% set streamTargetSchemaName = currentState.storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='schema') | first %}
            {% set streamName = currentState.node.name + '_STREAM' %} %}
            {% set fullyQualifiedStreamName = '"' + streamTargetDatabaseName + '"."' + streamTargetSchemaName + '"."' + streamName + '"' %}

            {# Target Table Info #}
            {% set targetTableDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
            {% set targetTableSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
            {% set fullyQualifiedTargetTableName = ref_no_link(currentState.node.location.name, currentState.node.name) %}
            {% set targetTableName = currentState.node.name %}

            {# Task Info #}
            {% set taskName = currentState.node.name + '_TASK'  %}
            {%- set fullyQualifiedTaskName = streamTargetDatabaseName + '.' + streamTargetSchemaName + '."' + taskName + '"' -%} 


            {{ stage('Drop Stream') }}
            DROP STREAM IF EXISTS {{ fullyQualifiedStreamName }}

            {{ stage('Drop Table') }}
            DROP TABLE IF EXISTS {{ fullyQualifiedTargetTableName }}

            {%- if currentState.config.schedulingPeriodOption == 'Predecessor' -%} 
                {%- set fullyQualifiedRootTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + currentState.config.rootTask + '"' -%} 

            {{ stage('Suspend Root Task') }}
                ALTER TASK IF EXISTS {{ fullyQualifiedRootTaskName }} SUSPEND
            {{ stage('Drop Current Task Task') }}
                DROP TASK IF EXISTS {{ fullyQualifiedTaskName }} 
            {{ stage('Resume Root Task') }}
                select system$task_dependents_enable('{{ fullyQualifiedRootTaskName }}');
            {%- else -%}
            {{ stage('Drop Current Task') }}
                DROP TASK IF EXISTS {{ fullyQualifiedTaskName }} 
            {%- endif -%}

            {%- else -%}

            {{ stage('Nothing to do.') }}
            select 1 = 0

            {% endif %}

        run:
          templateString: ""
    name: Stream and Insert or Merge - v0
    version: 1
  StepType-3:
    id: "3"
    isDisabled: true
    metadata:
      defaultStorageLocation: STG
      error: null
      nodeMetadataSpec: |-
        capitalized: Deferred Merge - Append Stream
        short: DM_VIEW
        tagColor: black
        plural: Deferred Merge

        config:
        - groupName: Stream Options
          items:
          - displayName: Source Object
            attributeName: sourceType
            type: dropdownSelector
            default: Table
            options:
              - Table
              - External Table
              - View
            isRequired: false

          - displayName: Append Only Stream
            attributeName: appendOnly
            type: dropdownSelector
            default: "true"
            options:
              - "true"
            isRequired: true
            enableIf: "{% if config.sourceType == 'Table' or config.sourceType == 'View' %} true {% else %} false {% endif %}"

          - displayName: Show Initial Rows
            attributeName: initialRows
            type: toggleButton
            default: true
            isRequired: true
            enableIf: "{% if config.sourceType == 'Table' or config.sourceType == 'View' %} true {% else %} false {% endif %}"

          - displayName: Insert Only
            attributeName: insertOnly
            type: toggleButton
            default: false
            isRequired: true
            enableIf: "{% if config.sourceType == 'External Table' %} true {% else %} false {% endif %}"

        - groupName: Target Loading Options
          items:
          - type: tabular
            displayName: 'Table Key(s)'
            attributeName: partitionBy
            columns:
          
            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: partColName
               isRequired: true
                
            isRequired: false

          - displayName: Record Versioning
            attributeName: recordVersioning
            type: dropdownSelector
            default: Datetime Column
            options:
              - Datetime Column
              - Date Column and Time Column
              - Numeric Column
            isRequired: true

          - type: tabular
            displayName: 'Timestamp or Sequence'
            attributeName: orderBy
            columns:
          
            -  type: columnDropdownSelector
               displayName: Column Name
               attributeName: colName
               isRequired: true
               enableIf: "{% if config.recordVersioning in ('Datetime Column','Numeric Column') %} true {% else %} false {% endif %}"
            
            -  type: dropdownSelector
               displayName: Sort Order
               attributeName: sortOrd
               default: desc
               options:
               - desc
               - asc
               isRequired: true
               enableIf: "{% if config.recordVersioning in ('Datetime Column','Numeric Column') %} true {% else %} false {% endif %}"
            
            isRequired: false
            enableIf: "{% if config.recordVersioning in ('Datetime Column','Numeric Column') %} true {% else %} false {% endif %}"

          - type: tabular
            displayName: 'Date / Timestamp Columns'
            attributeName: orderByDateTime
            columns:
          
            -  type: columnDropdownSelector
               displayName: Date Column
               attributeName: colNameDate
               isRequired: true
               enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"
            
            -  type: columnDropdownSelector
               displayName: Timestamp Column
               attributeName: colNameTimestamp
               isRequired: true
               enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"
            
            -  type: dropdownSelector
               displayName: Sort Order
               attributeName: sortOrdDateTimestamp
               default: desc
               options:
               - desc
               - asc
               isRequired: true
               enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"
            
            isRequired: false
            enableIf: "{% if config.recordVersioning in ('Date Column and Time Column') %} true {% else %} false {% endif %}"

        - groupName: Target Row DML Operations
          items:
          - displayName: Column that Identifies DML Operations
            attributeName: dmlCol
            type: columnDropdownSelector
            isRequired: false

          - displayName: Include Value for Update
            attributeName: capUpdate
            type: toggleButton
            default: false
            isRequired: false
         
          - displayName: Insert Value
            attributeName: dmlInsert
            type: textBox
            default: I
            isRequired: true
         
          - displayName: Update Value
            attributeName: dmlUpdate
            type: textBox
            default: U
            isRequired: true
            enableIf: "{% if config.capUpdate == true %} true {% else %} false {% endif %}"
         
          - displayName: Delete Value
            attributeName: dmlDelete
            type: textBox
            default: D
            isRequired: true
         
        - groupName: Target Delete Options
          items:
          - displayName: Soft Delete
            attributeName: softDeleteFlag
            type: toggleButton
            default: false
            isRequired: false

          - displayName: Retain Last Non-Deleted Values
            attributeName: retainLastNonDeleteFlag
            type: toggleButton
            default: false
            isRequired: false
         
        - groupName: Target Clustering Options
          items:
          - displayName: Cluster Key
            attributeName: clsKey
            type: dropdownSelector
            default: None
            options:
              - None
              - Table Key
              - Primary Key from Source
              - Row Update Timestamp
              - Primary Key and Update Timestamp from Source
              - Update Timestamp and Primary Key from Source
              - Custom Cluster Columns
              - Custom Cluster Key
            isRequired: false

          - displayName: Custom Cluster Key (ex. col1, left(col2,3), coln)
            attributeName: clsKeyCus
            type: textBox
            isRequired: false
            enableIf: "{% if config.clsKey == 'Custom Cluster Key' %} true {% else %} false {% endif %}"
         
        - groupName: Scheduling Options
          items:
          - displayName: Scheduling Options
            attributeName: schedulingMode
            type: dropdownSelector
            default: Warehouse Task
            options:
              - Warehouse Task
              - Serverless Task
            isRequired: true

          - displayName: When Source Stream has Data Flag
            attributeName: flagSrcStream
            type: toggleButton
            isRequired: true

          - displayName: Select Warehouse on which to run task
            attributeName: whName
            type: textBox
            default: '<WAREHOUSE_NAME>'
            isRequired: false
            enableIf: "{% if config.schedulingMode == 'Warehouse Task' %} true {% else %} false {% endif %}"

          - displayName: Select initial serverless Warehouse size
            attributeName: serverlessSize
            type: dropdownSelector
            default: 'MEDIUM'
            options:
              - XSMALL
              - SMALL
              - MEDIUM
              - LARGE
              - XLARGE
              - XXLARGE
            isRequired: false
            enableIf: "{% if config.schedulingMode == 'Serverless Task' %} true {% else %} false {% endif %}"

          - displayName: Task Schedule
            attributeName: schedulePeriodOption
            type: dropdownSelector
            default: Minutes
            options:
              - Minutes
              - CRON
              - Predecessor
            isRequired: TRUE

          - displayName: Enter task schedule using minutes
            attributeName: schedulePeriod
            type: textBox
            default: '60'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Minutes' %} true {% else %} false {% endif %}"

          - displayName: Enter task schedule using CRON
            attributeName: scheduleCRON
            type: textBox
            default: '5 0-23 * * * America/Los_Angeles'
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'CRON' %} true {% else %} false {% endif %}"

          - displayName: Enter predecessor task(s) seperated by a comma 
            attributeName: predTask
            type: textBox
            default: ""
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Predecessor' %} true {% else %} false {% endif %}"

          - displayName: Enter root task name
            attributeName: rootTask
            type: textBox
            default: ""
            isRequired: false
            enableIf: "{% if config.schedulePeriodOption == 'Predecessor' %} true {% else %} false {% endif %}"

        - groupName: "Pre/Post SQL"
          items: 
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: 'DM_UPDATE_TIMESTAMP'
          transform: "current_timestamp::timestamp_ntz"
          dataType: timestamp
          placement: end
          attributeName: hmUpdTs
      templates:
        create:
          templateString: |-
            {# Set Namespace Variables #}
            {% set nsVariables = namespace(taskWhenRun="") %}
            {% set nsVariables = namespace(partition="") %}
            {% set nsVariables = namespace(orderBy="") %}
            {% set nsVariables = namespace(rowNumber="") %}
            {% set nsVariables = namespace(tableKey=[]) %}
            {% set nsVariables = namespace(sortKey=[]) %}
            {% set nsVariables = namespace(tableKeySort=[]) %}
            {% set nsVariables = namespace(hybridMergeSortFilter=[]) %}

            {# Source Object Location and Name #}
            {% set sourceStorageLocation = sources[0].dependencies[0].node.location.name %}
            {% set sourceDatabaseName = storageLocations | selectattr('name', 'equalto', sourceStorageLocation) | map(attribute='database') | first %}
            {% set sourceSchemaName = storageLocations | selectattr('name', 'equalto', sourceStorageLocation) | map(attribute='schema') | first %}
            {% set sourceTableName = sources[0].dependencies[0].node.name %}
            {% set fullyQualifiedSourceTableName = '"' + sourceDatabaseName + '"."' + sourceSchemaName + '"."' + sourceTableName + '"' %}

            {# Target Stream Location and Name #}
            {% set streamTargetLocationName = node.location.name %}
            {% set streamTargetDatabaseName = storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='database') | first %}
            {% set streamTargetSchemaName = storageLocations | selectattr('name', 'equalto', streamTargetLocationName) | map(attribute='schema') | first %}
            {% set streamName = node.name + '_STREAM' %}
            {% set fullyQualifiedStreamName = '"' + streamTargetDatabaseName + '"."' + streamTargetSchemaName + '"."' + streamName + '"' %}
            {% set changesClauseAt = 'AT(stream => \'' + fullyQualifiedStreamName + '\')' %}

            {# Target Table Info #}
            {% set targetTableDatabase = ref_no_link(node.location.name, node.name).split('.')[0] %} 
            {% set targetTableSchema = ref_no_link(node.location.name, node.name).split('.')[1] %} 
            {% set fullyQualifiedTargetTableName = ref_no_link(node.location.name, node.name).replace('DM_VIEW_','DM_TABLE_') %}
            {% set targetTableName = node.name %}

            {% set targetTableColumnIds = columns | map(attribute='id') | list %}
            {% set targetTableColumnNames = columns | map(attribute='name') | list %}
            {% set targetTableMergeUpdateColumn = columns | selectattr('hmUpdTs', 'defined') | map(attribute='name') | first %}
            {% set targetTableDmlIdentifierColumn = config.dmlCol.name %}
            {% set targetTableDmlIdentifierColumnDatatype = config.dmlCol.dataType %}
            {% set targetTableDmlIdentifierColumnQuotes = '"' + targetTableDmlIdentifierColumn + '"' %}

            {# Merge partition by and order by #}
            {% set targetTableColumnNamesUpdate = targetTableColumnNames | reject('in', config.partitionBy.get('items') | map(attribute='partColName.name')) | list %}

            {% for i in config.partitionBy.get('items') %}
                {%- if loop.first -%}
                    {% set nsVariables.partition = '"' + i.partColName.name + '"' %}
                {% else %}
                    {% set nsVariables.partition = nsVariables.partition + ', "' + i.partColName.name + '"' %}
                {%- endif -%}

                {% set targetTableColumnNamesUpdate = targetTableColumnNames | reject('in', i.partColName.name) | list %}

            {% endfor %}

            {% if config.recordVersioning in ('Datetime Column','Numeric Column') %}
                {% set datetimeNumericColSort = config.orderBy.get('items') %}
                {% set nsVariables.orderBy = '"' + datetimeNumericColSort  | map(attribute='colName.name') | first + '" ' + datetimeNumericColSort  | map(attribute='sortOrd') | first %}
                {% set nsVariables.rowNumber = 'ROW_NUMBER() OVER (PARTITION BY ' + nsVariables.partition + ' ORDER BY ' + nsVariables.orderBy + ')' %}
                {% set nsVariables.hybridMergeSortFilter = 'alias."' + datetimeNumericColSort  | map(attribute='colName.name') | first + '"' %}

                {%- set nsVariables.sortKey = config.orderBy.get('items') %}
                {% set nsVariables.sortKey = nsVariables.sortKey | map(attribute='colName.name') | list %}
            {% else %}
                {% set dateTimeColSort = config.orderByDateTime.get('items') %}
                {% set dateCol = dateTimeColSort | map(attribute='colNameDate.name') | first %}
                {% set timeCol = dateTimeColSort | map(attribute='colNameTimestamp.name') | first %}
                {% set sortOrdDateTimestamp = dateTimeColSort | map(attribute='sortOrdDateTimestamp') | first %}
                {% set nsVariables.orderBy = 'to_timestamp("' + dateCol + '" || ' + '\'T\'' + ' ||"' + timeCol + '") ' + sortOrdDateTimestamp %}
                {% set nsVariables.rowNumber = 'ROW_NUMBER() OVER (PARTITION BY ' + nsVariables.partition + ' ORDER BY ' + nsVariables.orderBy + ')' %}
                {% set nsVariables.hybridMergeSortFilter = 'to_timestamp(alias."' + dateCol + '" || ' + '\'T\'' + ' || alias."' + timeCol + '")' %}

                {%- set nsVariables.sortKey = config.orderByDateTime.get('items') %}
                {% set nsVariables.sortKey = nsVariables.sortKey | map(attribute='colNameDate.name') | list + nsVariables.sortKey | map(attribute='colNameTimestamp.name') | list %}
            {% endif %}

            {%- set nsVariables.tableKey = config.partitionBy.get('items') %}
            {% set nsVariables.tableKey = nsVariables.tableKey | map(attribute='partColName.name') | list %}

            {%- set nsVariables.tableKeySort = nsVariables.tableKey + nsVariables.sortKey %}

            {# Stream Type #}
            {% if config.sourceType == 'Table' %} 
                {% set streamType = 'TABLE' %}
                {% set streamSourceObjectName = fullyQualifiedSourceTableName %}
            {% elif config.sourceType == 'External Table' %} 
                {% set streamType = 'EXTERNAL TABLE' %}
                {% set streamSourceObjectName = fullyQualifiedSourceTableName %}
            {% else %} 
                {% set streamType = 'VIEW' %}
                {% set streamSourceObjectName = fullyQualifiedSourceTableName %}
            {% endif %}

            {# DML Identifier Quoting #}
            {% if ((targetTableDmlIdentifierColumnDatatype in ('FLOAT','BOOLEAN')) or (targetTableDmlIdentifierColumnDatatype[:6] == 'NUMBER')) %}
                {% set insertValue = config.dmlInsert %}
                {% set deleteValue = config.dmlDelete %}
                {% if config.capUpdate == true %}
                    {% set updateValue = config.dmlUpdate %}
                {% endif %}
            {% else %}
                {% set insertValue = "'" + config.dmlInsert + "'" %}
                {% set deleteValue = "'" + config.dmlDelete + "'" %}
                {% if config.capUpdate == true %}
                    {% set updateValue = "'" + config.dmlUpdate + "'" %}
                {% endif %}
            {% endif %}

            {# Stream Append Behavior #}
            {% if streamType == 'TABLE' or streamType == 'VIEW' %} 
                    {% set streamAppendMode = 'APPEND_ONLY = TRUE' %}
                    {% set changesClauseMode = 'CHANGES(information => append_only)' %}
            {% else %}
                {% set streamAppendMode = '' %}
            {% endif %}

            {# Stream Initial Row Behavior #}
            {% if streamType == 'TABLE' or streamType == 'VIEW' %} 
                {% if config.initialRows == true %} 
                    {% set streamInitialRowsMode = 'SHOW_INITIAL_ROWS = TRUE' %}
                {% else %} 
                    {% set streamInitialRowsMode = 'SHOW_INITIAL_ROWS = FALSE' %}
                {% endif %}
            {% else %}
                {% set streamInitialRowsMode = '' %}
            {% endif %}

            {# Stream Insert Only Behavior #}
            {% if streamType == 'EXTERNAL TABLE' %} 
                {% if config.insertOnly == true %} 
                    {% set streamInsertOnlyMode = 'INSERT_ONLY = TRUE' %}
                {% else %} 
                    {% set streamInsertOnlyMode = 'INSERT_ONLY = FALSE' %}
                {% endif %}
            {% else %}
                {% set streamInsertOnlyMode = '' %}
            {% endif %}

            {# Hybrid View Info #}
            {# View created in same schema as Target Table #}
            {% set targetHybridViewDatabase = targetTableDatabase %} 
            {% set targetHybridViewSchema = targetTableSchema %} 
            {% set targetHybridViewName = node.name  %}
            {% set fullyQualifiedHybridViewName = targetHybridViewDatabase + '.' + targetHybridViewSchema + '."' + targetHybridViewName + '"' %}

            {# Task Info #}
            {% set taskName = node.name + '_TASK'  %}
            {%- set fullyQualifiedTaskName = targetTableDatabase + '.' + targetTableSchema + '."' + taskName + '"' -%} 

            {# Task Type #}
            {%- if config.schedulingMode == 'Warehouse Task' -%} 
                {%- set taskType = 'WAREHOUSE = ' + config.whName -%} 
            {%- else -%}
                {%- set taskType = 'USER_TASK_MANAGED_INITIAL_WAREHOUSE_SIZE = ' + config.serverlessSize -%} 
            {%- endif -%}

            {# Schedule Type #}
            {%- if config.schedulePeriodOption == 'Minutes' -%} 
                {%- set nsVariables.taskWhenRun = 'SCHEDULE = ' + "'" + config.schedulePeriod + ' MINUTE' + "'" -%} 
            {% elif config.schedulePeriodOption == 'CRON' %}
                {%- set nsVariables.taskWhenRun = 'SCHEDULE = ' + "'" + 'USING CRON ' + config.scheduleCRON %}
            {%- else -%}
                {%- set nsVariables.taskWhenRun = 'AFTER ' -%}
                {%- set predecessorTasks = (config.predTask).split(",") -%}

                {%- for p in predecessorTasks -%}
                    {%- set nsVariables.taskWhenRun = nsVariables.taskWhenRun + targetTableDatabase + '.' + targetTableSchema + '.' + p -%}
                    {%- if not loop.last -%} 
                        {%- set nsVariables.taskWhenRun = nsVariables.taskWhenRun + ',' -%}
                    {%- endif %}
                {% endfor %}    
            {%- endif -%}

            {# When Stream has data logic #}
            {%- if config.flagSrcStream == true -%} 
                {%- set streamPoll = "WHEN SYSTEM$STREAM_HAS_DATA('" + fullyQualifiedStreamName + "')" -%} 
            {%- endif -%}

            {{ stage('Create Stream') }}
            CREATE OR REPLACE STREAM {{ fullyQualifiedStreamName }}
                ON {{ streamType }} {{ streamSourceObjectName }}
                {{ streamAppendMode }}
                {{ streamInitialRowsMode }}
                {{ streamInsertOnlyMode }}
                
            {{ stage('Create Target Table') }}
            CREATE OR REPLACE TABLE {{ fullyQualifiedTargetTableName }}
                (
                {%- for col in columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                {%- endfor %}
                )

            {% if config.initialRows == true %}
                {{ stage('Target Table Initial Load') }}
                INSERT INTO {{ fullyQualifiedTargetTableName }}
                SELECT
                {%- for col in columns %}
                    "{{ col.name }}"
                    {%- if not loop.last -%}, {% endif %}
                {%- endfor %}
                FROM (SELECT {%- for col in columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% else %}
                                    "{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                {%- if not loop.last -%}, {% endif %}
                            {%- endfor %}
                            {% if config.softDeleteFlag == false %}
                                ,case when {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }} then 0 else 1 end as load_flag
                            {% endif %}
                    FROM {{ fullyQualifiedStreamName }}
                    QUALIFY {{ nsVariables.rowNumber }} = 1)
                    {% if config.softDeleteFlag == false %}
                        WHERE load_flag = 1
                    {% endif %}
            {% endif %}

            {{ stage('Create Hybrid View') }}
            CREATE OR REPLACE VIEW {{ fullyQualifiedHybridViewName }} (
                {%- for col in columns %}
                    "{{ col.name }}"
                    {%- if not loop.last -%}, {% endif %}
                {%- endfor %} ) AS

            {% if config.softDeleteFlag == true and config.retainLastNonDeleteFlag == false %}
                /* SOFT_DELETE = true RETAIN_LAST_NON_DELETE = false */
                WITH delta AS 
                (
                SELECT {%- for col in columns %}
                            {% if col.name == targetTableMergeUpdateColumn %}
                                {{ sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                            {% else %}
                                "{{ col.name }}" as "{{ col.name }}"
                            {% endif %}
                            {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                FROM {{ fullyQualifiedSourceTableName }}
                {{ changesClauseMode }}
                {{ changesClauseAt }}
                QUALIFY {{ nsVariables.rowNumber }} = 1)

                SELECT {%- for col in columns %}
                            "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                FROM {{ fullyQualifiedTargetTableName }} a
                WHERE NOT EXISTS (SELECT 1
                                FROM delta d
                                WHERE {%- for col in (nsVariables.partition).split(",") %}
                                            a.{{ col }} = d.{{ col }}
                                            {% if not loop.last -%}AND {% endif %}
                                        {%- endfor %})
                UNION ALL
                SELECT {%- for col in columns %}
                            "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                FROM delta d

            {% elif config.softDeleteFlag == false and config.retainLastNonDeleteFlag == false %} 
                /* SOFT_DELETE = false RETAIN_LAST_NON_DELETE = false */
                WITH delta AS 
                (
                SELECT {%- for col in columns %}
                            {% if col.name == targetTableMergeUpdateColumn %}
                                {{ sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                            {% else %}
                                "{{ col.name }}" as "{{ col.name }}"
                            {% endif %}
                            ,
                    {%- endfor %}
                            CASE WHEN {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }} THEN 0 ELSE 1 END AS LOAD_FLAG
                FROM {{ fullyQualifiedSourceTableName }}
                {{ changesClauseMode }}
                {{ changesClauseAt }}
                QUALIFY {{ nsVariables.rowNumber }} = 1)

                SELECT {%- for col in columns %}
                            "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                FROM {{ fullyQualifiedTargetTableName }} a
                WHERE NOT EXISTS (SELECT 1
                                FROM delta d
                                WHERE {%- for col in (nsVariables.partition).split(",") %}
                                            a.{{ col }} = d.{{ col }}
                                            {% if not loop.last -%}AND {% endif %}
                                        {%- endfor %})
                UNION ALL
                SELECT {%- for col in columns %}
                            "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                FROM delta d
                WHERE LOAD_FLAG = 1

            {% elif config.softDeleteFlag == true and config.retainLastNonDeleteFlag == true %} 
                /* SOFT_DELETE = true RETAIN_LAST_NON_DELETE = true */
                WITH 
                a AS (
                SELECT {%- for col in columns %}
                            {% if col.name == targetTableMergeUpdateColumn %}
                                {{ sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                            {% else %}
                                "{{ col.name }}" as "{{ col.name }}"
                            {% endif %}
                            {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                FROM {{ fullyQualifiedSourceTableName }}
                {{ changesClauseMode }}
                {{ changesClauseAt }}
                WHERE {{ targetTableDmlIdentifierColumnQuotes }} != {{ deleteValue }}
                QUALIFY {{ nsVariables.rowNumber }} = 1),

                d AS (
                SELECT {%- for col in columns %}
                            {% if col.name == targetTableMergeUpdateColumn %}
                                {{ sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                            {% else %}
                                "{{ col.name }}" as "{{ col.name }}"
                            {% endif %}
                            {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                FROM {{ fullyQualifiedSourceTableName }}
                {{ changesClauseMode }}
                {{ changesClauseAt }}
                WHERE {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}
                QUALIFY {{ nsVariables.rowNumber }} = 1),

                ods_d as (
                SELECT {%- for col in columns %}
                            {% if col.name == targetTableMergeUpdateColumn %}
                                {{ sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                            {% elif col.name in nsVariables.orderBy  %} 
                                d."{{ col.name }}" as "{{ col.name }}"
                            {% elif col.name == targetTableDmlIdentifierColumn  %} 
                                {{ deleteValue }} as "{{ col.name }}"
                            {% else %}
                                a."{{ col.name }}" as "{{ col.name }}"
                            {% endif %}
                            {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                FROM {{ fullyQualifiedTargetTableName }} a
                INNER JOIN (
                         SELECT {%- for col in nsVariables.tableKeySort %}
                                        "{{ col }}"
                                    {%- if not loop.last -%}, {% endif %}
                                {%- endfor %}
                            FROM {{ fullyQualifiedSourceTableName }}
                            {{ changesClauseMode }}
                            {{ changesClauseAt }}
                            WHERE {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}) d
                ON 
                {% for col in nsVariables.tableKey %}
                    a."{{col}}" = d."{{col}}"
                    {%- if not loop.last -%} AND {% endif %}
                    {%- if loop.last -%} ) {% endif %}
                {% endfor %}

                SELECT {%- for col in columns %}
                            {% if col.name == targetTableMergeUpdateColumn %}
                                {{ sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                            {% elif col.name in nsVariables.orderBy  %} 
                                coalesce(d."{{ col.name }}", a."{{ col.name }}") as "{{ col.name }}"
                            {% elif col.name == targetTableDmlIdentifierColumn  %} 
                                coalesce(d."{{ col.name }}", a."{{ col.name }}") as "{{ col.name }}"
                            {% else %}
                                a."{{ col.name }}" as "{{ col.name }}"
                            {% endif %}
                            {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                FROM a
                LEFT OUTER JOIN d
                ON 
                    {%- for col in nsVariables.tableKey %}
                            a."{{ col }}" = d."{{ col }}" AND
                    {%- endfor %}
                    {{ nsVariables.hybridMergeSortFilter | replace('alias','d') }} > {{ nsVariables.hybridMergeSortFilter | replace('alias','a') }}
                UNION ALL
                SELECT {%- for col in columns %}
                        "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                FROM ods_d
                UNION ALL
                SELECT {%- for col in columns %}
                            "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                FROM {{ fullyQualifiedTargetTableName }} d
                WHERE NOT EXISTS (
                    SELECT 1
                    FROM {{ fullyQualifiedSourceTableName }}
                    {{ changesClauseMode }}
                    {{ changesClauseAt }} a
                    WHERE 
                    {%- for col in nsVariables.tableKey %}
                            a."{{ col }}" = d."{{ col }}"
                        {%- if not loop.last -%} AND {% endif %}
                    {%- endfor %})

            {% elif config.softDeleteFlag == false and config.retainLastNonDeleteFlag == true %} 
                /* SOFT_DELETE = false RETAIN_LAST_NON_DELETE = true */
                WITH 
                a AS (
                SELECT {%- for col in columns %}
                            {% if col.name == targetTableMergeUpdateColumn %}
                                {{ sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                            {% else %}
                                "{{ col.name }}" as "{{ col.name }}"
                            {% endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                FROM {{ fullyQualifiedSourceTableName }}
                {{ changesClauseMode }}
                {{ changesClauseAt }}
                WHERE {{ targetTableDmlIdentifierColumnQuotes }} != {{ deleteValue }}
                QUALIFY {{ nsVariables.rowNumber }} = 1),

                d AS (
                SELECT {%- for col in columns %}
                            {% if col.name == targetTableMergeUpdateColumn %}
                                {{ sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                            {% else %}
                                "{{ col.name }}" as "{{ col.name }}"
                            {% endif %}
                            {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                FROM {{ fullyQualifiedSourceTableName }}
                {{ changesClauseMode }}
                {{ changesClauseAt }}
                WHERE {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}
                QUALIFY {{ nsVariables.rowNumber }} = 1),

                ods_d as (
                SELECT {%- for col in columns %}
                            {% if col.name == targetTableMergeUpdateColumn %}
                                {{ sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                            {% elif col.name in nsVariables.orderBy  %} 
                                d."{{ col.name }}" as "{{ col.name }}"
                            {% elif col.name == targetTableDmlIdentifierColumn  %} 
                                {{ deleteValue }} as "{{ col.name }}"
                            {% else %}
                                a."{{ col.name }}" as "{{ col.name }}"
                            {% endif %}
                            {%- if not loop.last -%}, {% endif %}
                    {%- endfor %}
                FROM {{ fullyQualifiedTargetTableName }} a
                INNER JOIN (
                         SELECT {%- for col in nsVariables.tableKeySort %}
                                        "{{ col }}"
                                    {%- if not loop.last -%}, {% endif %}
                                {%- endfor %}
                            FROM {{ fullyQualifiedSourceTableName }}
                            {{ changesClauseMode }}
                            {{ changesClauseAt }}
                            WHERE {{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}) d
                ON 
                {% for col in nsVariables.tableKey %}
                    a."{{col}}" = d."{{col}}"
                    {%- if not loop.last -%} AND {% endif %}
                    {%- if loop.last -%} ) {% endif %}
                {% endfor %}

                SELECT 
                {%- for col in columns %}
                        "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                {%- endfor %}
                FROM (
                    SELECT {%- for col in columns %}
                                {% if col.name == targetTableMergeUpdateColumn %}
                                    {{ sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                                {% elif col.name in nsVariables.orderBy  %} 
                                    coalesce(d."{{ col.name }}", a."{{ col.name }}") as "{{ col.name }}"
                                {% elif col.name == targetTableDmlIdentifierColumn  %} 
                                    coalesce(d."{{ col.name }}", a."{{ col.name }}") as "{{ col.name }}"
                                {% else %}
                                    a."{{ col.name }}" as "{{ col.name }}"
                                {% endif %}
                                ,
                        {%- endfor %}
                        case when coalesce(d.{{ targetTableDmlIdentifierColumnQuotes }}, a.{{ targetTableDmlIdentifierColumnQuotes }}) = {{ deleteValue }} then 0 else 1 end as load_flag
                    FROM a
                    LEFT OUTER JOIN d
                    ON 
                        {%- for col in nsVariables.tableKey %}
                                a."{{ col }}" = d."{{ col }}" AND
                        {%- endfor %}
                        {{ nsVariables.hybridMergeSortFilter | replace('alias','d') }} > {{ nsVariables.hybridMergeSortFilter | replace('alias','a') }}
                    )
                    WHERE load_flag = 1
                    UNION ALL
                    SELECT {%- for col in columns %}
                            "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {%- endfor %}
                    FROM ods_d
                    UNION ALL
                    SELECT {%- for col in columns %}
                                "{{ col.name }}"
                                {%- if not loop.last -%}, {% endif %}
                            {%- endfor %}
                    FROM {{ fullyQualifiedTargetTableName }} d
                    WHERE NOT EXISTS (
                        SELECT 1
                        FROM {{ fullyQualifiedSourceTableName }}
                        {{ changesClauseMode }}
                        {{ changesClauseAt }} a
                        WHERE 
                        {%- for col in nsVariables.tableKey %}
                                a."{{ col }}" = d."{{ col }}"
                            {%- if not loop.last -%} AND {% endif %}
                        {%- endfor %})

            {% endif %}

            {{ stage('Create Task') }}
            CREATE OR REPLACE TASK 
                {{ fullyQualifiedTaskName }} 
                {{ taskType}} 
                {{ nsVariables.taskWhenRun }} 
                {% if nsVariables.poll != 'WHEN ' %} {{ nsVariables.poll }} {% endif %}
            AS 
            MERGE INTO {{ fullyQualifiedTargetTableName }}
            USING (SELECT
            {%- for col in columns %}
                        {% if col.name == targetTableMergeUpdateColumn %}
                            {{ sources[0].columns | selectattr('name','equalto',targetTableMergeUpdateColumn) | map(attribute='transform') | first }} as "{{ col.name }}"
                        {% else %}
                            "{{ col.name }}" as "{{ col.name }}"
                        {% endif %}
                        {%- if not loop.last -%}, {% endif %}
                {%- endfor %}
            FROM {{ fullyQualifiedStreamName }}
            {{ whereStreamFilter }}
            QUALIFY {{ nsVariables.rowNumber }} = 1) d
            ON 
            {% for col in nsVariables.tableKey %}
                a."{{col}}" = d."{{col}}"
                {%- if not loop.last -%} AND {% endif %}
            {% endfor %}

            WHEN NOT MATCHED and d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ insertValue }} THEN INSERT (
                {% for col in columns %}
                    a."{{ col.name }}"
                    {% if not loop.last %}, {% endif -%}
                {%- endfor -%}
                )
            VALUES (
                {% for col in columns %}
                    d."{{ col.name }}"
                    {% if not loop.last %}, {%- endif -%}
                {%- endfor -%}
                )
            {% if config.capUpdate == true %}
                WHEN NOT MATCHED and d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ updateValue }} THEN INSERT (
                    {% for col in columns %}
                        a."{{ col.name }}"
                        {% if not loop.last %}, {% endif -%}
                    {%- endfor -%}
                    )
                VALUES (
                    {% for col in columns %}
                        d."{{ col.name }}"
                        {% if not loop.last %}, {%- endif -%}
                    {%- endfor -%}
                    )
            {% endif %}
            WHEN NOT MATCHED AND d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }} AND /* softDeleteFlag True */ {{ config.softDeleteFlag }} = True THEN INSERT (
                {% for col in columns %}
                    a."{{ col.name }}"
                    {% if not loop.last %}, {% endif -%}
                {%- endfor -%}
                )
            VALUES (
                {% for col in columns %}
                    d."{{ col.name }}"
                    {% if not loop.last %}, {%- endif -%}
                {%- endfor -%}
                )
            {% if config.capUpdate == true %}
                /* Update DML value selected */
                WHEN MATCHED AND d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ updateValue }} THEN UPDATE SET
                    {% for col in targetTableColumnNamesUpdate %}
                        a."{{ col }}" = d."{{ col }}"
                        {% if not loop.last %}, {% endif -%}
                    {%- endfor -%}
            {% endif %}
            WHEN MATCHED AND d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ insertValue }} THEN UPDATE SET
                {% for col in targetTableColumnNamesUpdate %}
                    a."{{ col }}" = d."{{ col }}"
                    {% if not loop.last %}, {% endif -%}
                {%- endfor -%}
            {% if config.softDeleteFlag == true %}
                /* Soft Delete */
                WHEN MATCHED AND d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}
                THEN UPDATE SET
                    {% for col in (targetTableColumnNamesUpdate) %}
                        {% if (col in (targetTableMergeUpdateColumn, targetTableDmlIdentifierColumn)) or col in (nsVariables.sortKey) %}
                            a."{{ col }}" = d."{{ col }}"
                            {% if not loop.last %}, {% endif -%}
                        {% endif %}
                    {%- endfor -%}
            {% else %}
                /* Hard Delete */
                WHEN MATCHED AND d.{{ targetTableDmlIdentifierColumnQuotes }} = {{ deleteValue }}
                THEN DELETE
            {% endif %}
        run:
          templateString: ""
    name: Deferred Merge - Append Stream
    version: 1
  StepType-Dimension:
    id: Dimension
    isDisabled: false
    metadata:
      defaultStorageLocation: BI
      error: null
      nodeMetadataSpec: |-
        capitalized: Dimension
        short: DIM
        tagColor: '#1E339A'
        plural: Dimensions

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: businessKeyColumns
            isRequired: true

          - type: changeTrackingColumns
            isRequired: false

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
            	{{ stage('Create Dimension Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{% if col.isSurrogateKey %}
            		        identity
            			{% endif %}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
            	{{ stage('Create Dimension View') }}

            	CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%},{% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            	AS
            	{% for source in sources %}

            		{% if loop.first %}SELECT {% endif %}

            		{% for col in source.columns %}
            			{% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
            			{% else %}
                            {{ get_source_transform(col) }}
            			{% endif %}
            			AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            		{{ source.join }}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

            {% endif %}
        run:
          templateString: |

            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}

            	{% if config.preSQL %}			
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        {# The if-block below avoids unnecessary updates when no type 2 column changes are present #}
                        {% if source.columns 
                            | rejectattr('isSurrogateKey')
                            | rejectattr('isBusinessKey')
                            | rejectattr('isChangeTracking')
                            | rejectattr('isSystemVersion')
                            | rejectattr('isSystemCurrentFlag')
                            | rejectattr('isSystemStartDate')
                            | rejectattr('isSystemEndDate')
                            | rejectattr('isSystemCreateDate')
                            | rejectattr('isSystemUpdateDate') 
                            | list | length == 0 
                        %}
                            {# Skip Section #}
                        {% else %}
                          UNION ALL
                          /* Rows Needing To Be Updated Due To Changes To Non-Type-2 columns
                          This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                          SELECT
                          {%- for col in source.columns if not col.isSurrogateKey %}
                              {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                  "DIM"."{{ col.name }}"
                              {% elif col.isSystemCurrentFlag %}
                                  'Y'
                              {% else %}
                                  {{ get_source_transform(col) }}
                              {% endif %}
                              AS "{{ col.name }}",
                          {% endfor -%}
                              'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                          {{ source.join }}
                          INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                          {% for col in source.columns if col.isBusinessKey -%}
                              {% if not loop.first %}
                                  AND
                              {% endif %}
                              {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                          {% endfor %}
                          WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                          AND (
                          {% for col in source.columns if (col.isChangeTracking) -%}
                              {% if not loop.first %}
                                  AND
                              {% endif %}
                              {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                          {% endfor %} )
                          {% for col in source.columns if not (   col.isBusinessKey or
                                                                  col.isChangeTracking or
                                                                  col.isSurrogateKey or
                                                                  col.isSystemVersion or
                                                                  col.isSystemCurrentFlag or
                                                                  col.isSystemStartDate or
                                                                  col.isSystemEndDate or
                                                                  col.isSystemUpdateDate or
                                                                  col.isSystemCreateDate) -%}
                              {% if loop.first %}
                                  AND (
                              {% endif %}
                              {% if not loop.first %}
                                  OR
                              {% endif %}
                              NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                              {% if loop.last %}
                                  )
                              {% endif %}
                          {% endfor %}
                        {% endif %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}



                {% else %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% endif %}
            	
            	{% if config.postSQL %}			
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Dimension
    version: 1
  StepType-Fact:
    id: Fact
    isDisabled: false
    metadata:
      defaultStorageLocation: BI
      error: null
      nodeMetadataSpec: |
        capitalized: Fact
        plural: Facts
        short: FCT
        tagColor: '#D9A438'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |2-

                {% if node.materializationType == 'table' %}
                    {{ stage('Create Fact Table') }}
                
                    CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                    (
                        {% for col in columns %}
                            "{{ col.name }}" {{ col.dataType }}
                            {%- if not col.nullable %} NOT NULL
                                {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                            {% endif %}
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                    )
                    {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                
                
                {% elif node.materializationType == 'view' %}
                    {{ stage('Create Fact View') }}
                
                    CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                    (
                        {% for col in columns %}
                            "{{ col.name }}"
                            {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                            {%- if not loop.last -%},{% endif %}
                        {% endfor %}
                    )
                    {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                    AS
                    {% for source in sources %}
                
                        {% if loop.first %}SELECT {% endif %}
                
                        {% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                        {% endfor %}
                        {{ source.join }}
                
                        {% if not loop.last %} UNION ALL {% endif %}
                    {% endfor %}
                
                {% endif %}
                
        run:
          templateString: |2-

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

                {% if node.materializationType == 'table' %}
                    {% if config.preSQL %}
                        {{ stage('Pre-SQL') }}
                        {{ config.preSQL }}
                    {% endif %}
                    
                    {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
                    
                    {% for source in sources %}
                    
                        {% if has_business_key %}
                    
                            {{ stage('MERGE ' + source.name | string ) }}
                            MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                            USING (
                                SELECT
                                {% for col in source.columns %}
                                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                                    {%- if not loop.last %}, {% endif %}
                                {% endfor %}
                                {{ source.join }})
                                AS "SRC"
                            ON
                            {% for col in source.columns if col.isBusinessKey -%}
                                {% if not loop.first %}
                                    AND
                                {% endif %}
                                "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                            {% endfor %}
                            WHEN MATCHED
                            {% for col in source.columns if not (   col.isBusinessKey or
                                                                    col.isSystemUpdateDate or
                                                                    col.isSystemCreateDate) %}
                                {% if loop.first %}
                                    AND (
                                {% else %}
                                    OR
                                {% endif %}
                                NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                                {% if loop.last %}
                                    )
                                {% endif %}
                            {% endfor %}
                            THEN UPDATE SET
                            {%- for col in source.columns if not (col.isBusinessKey or col.isSystemCreateDate) %}
                                    "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor %}
                            WHEN NOT MATCHED THEN
                            INSERT (
                            {%- for col in source.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            )
                            VALUES (
                            {%- for col in source.columns if not col.isSurrogateKey %}
                                "SRC"."{{ col.name }}"
                                {% if not loop.last %}, {% endif %}
                            {% endfor -%}
                            )
                    
                        {% else %}
                    
                            {{ stage('Insert ' + source.name | string ) }}
                    
                                INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                                (
                                    {% for col in source.columns %}
                                        "{{ col.name }}"
                                        {%- if not loop.last -%},{% endif %}
                                    {% endfor %}
                                )
                    
                                SELECT
                                {% for col in source.columns %}
                                    {{ get_source_transform(col) }} AS "{{ col.name }}"
                                    {%- if not loop.last -%}, {% endif %}
                                {% endfor %}
                                {{ source.join }}
                        {% endif %}
                    {% endfor %}
                    {% if config.postSQL %}
                        {{ stage('Post-SQL') }}
                        {{ config.postSQL }}
                    {% endif %}
                {% endif %}

                {% if config.testsEnabled %}
                    {% for test in node.tests %}
                        {% if test.runOrder == 'After' %}
                            {{ test_stage(test.name, test.continueOnFailure) }}
                            {{ test.templateString }}
                        {% endif %}
                    {% endfor %}

                    {% for column in columns %}
                        {% for test in column.tests %}
                            {{ test_stage(column.name + ": " + test.name) }}
                            {{ test.templateString }}
                        {% endfor %}
                    {% endfor %}
                {% endif %}
                
                
    name: Fact
    version: 1
  StepType-Hub:
    id: Hub
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Hub
        short: 'HUB'
        plural: 'Hubs'

        tagColor: '#92712E'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            options: 
            - table
            default: table

          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |-
            {% if node.materializationType == 'table' %}
            				{{ stage('Create Hub Table') }}
            			
            				CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}" {{ col.dataType }}
            						{%- if not col.nullable %} NOT NULL
            							{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            						{% endif %}
            						{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            						{%- if not loop.last -%}, {% endif %}
            					{% endfor %}
            				)
            				{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            			
            			{% endif %}
        run:
          templateString: |2-

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}


            	{{ stage('Merge Hub') }}
            	MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT" USING
            	(
            		{% for source in sources %}
            		SELECT
            		{% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}

            		{{ source.join }}

            		{% if not loop.last %}
            			{{ config.insertStrategy }}
            		{% endif %}
            	{% endfor %}
            	)
            	AS "SRC"
            	ON
            	{% for col in sources[0].columns if (col.sourceColumns[0] 
                                                    and col.sourceColumns[0].column 
                                                    and col.sourceColumns[0].column.isHubHash
                                                    ) -%}
            		{% if not loop.first %}
            			AND
            		{% endif %}
            		"SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
            	{% endfor %}
            	WHEN NOT MATCHED THEN
            	INSERT
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	) VALUES
            	(
            		{% for col in columns %}
            			"SRC"."{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)


            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            	
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
            			
    name: Hub
    version: 1
  StepType-Link:
    id: Link
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Link
        short: 'LNK'
        plural: 'Links'
        tagColor: '#CA2287'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table

          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |-
            {% if node.materializationType == 'table' %}
            				{{ stage('Create Link Table') }}
            			
            				CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}" {{ col.dataType }}
            						{%- if not col.nullable %} NOT NULL
            							{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            						{% endif %}
            						{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            						{%- if not loop.last -%}, {% endif %}
            					{% endfor %}
            				)
            				{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            			
            			{% endif %}
        run:
          templateString: |2-

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	
            	{% endif %}

            			
            	{{ stage('Merge Link') }}
            	MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT" USING
            	(
            		{% for source in sources %}
            		SELECT
            		{% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}

            		{{ source.join }}

            		{% if not loop.last %}
            			{{ config.insertStrategy }}
            		{% endif %}
            	{% endfor %}
            	)
            	AS "SRC"
            	ON
            	{% for col in sources[0].columns if (col.sourceColumns[0] 
                                                    and col.sourceColumns[0].column 
                                                    and col.sourceColumns[0].column.isLinkHash
                                                    ) -%}
            		{% if not loop.first %}
            			AND
            		{% endif %}
            		"SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
            	{% endfor %}
            	WHEN NOT MATCHED THEN
            	INSERT
            	(
            		{% for col in columns %}
            			"{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	) VALUES
            	(
            		{% for col in columns %}
            			"SRC"."{{ col.name }}"
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)

            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}	
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
            			
    name: Link
    version: 1
  StepType-Satellite:
    id: Satellite
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Satellite
        short: 'SAT'
        plural: 'Satellites'
        tagColor: '#627DE9'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table

          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: UNION
            options:
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:
        - displayName: "LOAD_DATE"
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: "RECORD_SOURCE"
          transform: "''"
          dataType: VARCHAR
          placement: end
          attributeName: isSystemRecordSource
      templates:
        create:
          templateString: |-
            {% if node.materializationType == 'table' %}
            				{{ stage('Create Satellite Table') }}
            			
            				CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}" {{ col.dataType }}
            						{%- if not col.nullable %} NOT NULL
            							{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            						{% endif %}
            						{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            						{%- if not loop.last -%}, {% endif %}
            					{% endfor %}
            				)
            				{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
            			
            			{% endif %}
        run:
          templateString: |2-

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            		{% if config.preSQL %}
            			{{ stage('Pre-SQL') }}
            			{{ config.preSQL }}
            		{% endif %}
            	
            		{{ stage('Merge Satellite') }}
            		MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT" USING
            		(
            			{% for source in sources %}
            			SELECT
            			{% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            	
            			{{ source.join }}
            	
            			{% if not loop.last %}
            				{{ config.insertStrategy }}
            			{% endif %}
            		{% endfor %}
            		)
            		AS "SRC"
            		ON
            		{% for col in sources[0].columns if (col.sourceColumns[0] 
                                                        and col.sourceColumns[0].column 
                                                        and col.sourceColumns[0].column.isChangeHash
                                                        ) -%}
            			{% if not loop.first %}
            				AND
            			{% endif %}
            			"SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
            		{% endfor %}
            		WHEN NOT MATCHED THEN
            		INSERT
            		(
            			{% for col in columns %}
            				"{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            		) VALUES
            		(
            			{% for col in columns %}
            				"SRC"."{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            		)
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}	
            	{% endif %}
            	
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
            			
    name: Satellite
    version: 1
  StepType-Source:
    id: Source
    isDisabled: false
    metadata:
      defaultStorageLocation: null
      error: null
      nodeMetadataSpec: |-
        capitalized: Source
        short: null
        tagColor: '#D26000'
        plural: Sources
      templates:
        create:
          templateString: |
            {{ stage('Validating Source Exists') }}
            SELECT 1 FROM {{ ref(node.location.name, node.name) }} LIMIT 0
        run:
          templateString: |
            {{ stage('Validating Source Exists') }}
            SELECT 1 FROM {{ ref(node.location.name, node.name) }} LIMIT 0
    name: Source
    version: 1
  StepType-Stage:
    id: Stage
    isDisabled: false
    metadata:
      defaultStorageLocation: STG
      error: null
      nodeMetadataSpec: |
        capitalized: Stage
        short: STG
        plural: Stages
        tagColor: '#2EB67D'

        config:
        - groupName: Options
          items:
          - type: materializationSelector
            default: table
            options:
            - table
            - view
            isRequired: true

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}" 

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"
            
          - displayName: Multi Source Strategy
            attributeName: insertStrategy
            type: dropdownSelector
            default: INSERT
            options:
            - "INSERT"
            - "UNION"
            - "UNION ALL"
            isRequired: true
            enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"

          - displayName: Truncate Before
            attributeName: truncateBefore
            type: toggleButton
            default: true

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
            	
            	{{ node.override.create.script }}

            {% elif node.materializationType == 'table' %}
            	{{ stage('Create Stage Table') }}

            	CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
            	(
            		{% for col in columns %}
            			"{{ col.name }}" {{ col.dataType }}
            			{%- if not col.nullable %} NOT NULL
            				{%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
            			{% endif %}
            			{%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
            			{%- if not loop.last -%}, {% endif %}
            		{% endfor %}
            	)
            	{%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}

            {% endif %}
        run:
          templateString: |2

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
            	
            	
            		{% if config.truncateBefore %}
            	
            			{{ stage('Truncate Stage Table') }}
            			TRUNCATE IF EXISTS {{ ref_no_link(node.location.name, node.name) }}
            	
            		{% endif %}
            	
            	
            		{% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
            			{{ stage( config.insertStrategy + ' Sources' | string ) }}
            			INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            		{% endif %}
            	
            	
            		{% for source in sources %}
            	
            			{% if config.insertStrategy == 'INSERT' %}
            				{{ stage('Insert ' + source.name | string ) }}
            	
            				INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
            				(
            					{% for col in source.columns %}
            						"{{ col.name }}"
            						{%- if not loop.last -%},{% endif %}
            					{% endfor %}
            				)
            			{% endif %}
            	
            			SELECT
            			{% for col in source.columns %}
                            {{ get_source_transform(col) }} AS "{{ col.name }}"
            				{%- if not loop.last -%}, {% endif %}
            			{% endfor %}
            	
            			{{ source.join }}
            	
            			{% if config.insertStrategy in ['UNION', 'UNION ALL'] and not loop.last %}
            				{{config.insertStrategy}}
            			{% endif %}
            	
            		{% endfor %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Stage
    version: 1
  StepType-View:
    id: View
    isDisabled: false
    metadata:
      defaultStorageLocation: STG
      error: null
      nodeMetadataSpec: |
        capitalized: View
        short: V
        tagColor: '#C4C4C4'
        isDisabled: true
        plural: Views

        config:
          - groupName: Options
            items: 
            - type: materializationSelector
              options:
                - view
              default: view
              isRequired: true

            - type: toggleButton
              attributeName: selectDistinct
              displayName: Distinct

            - type: multisourceToggle

            - type: overrideSQLToggle

            - displayName: Multi Source Strategy
              attributeName: insertStrategy
              type: dropdownSelector
              default: UNION
              options:
              - "UNION"
              - "UNION ALL" 
              isRequired: true
              enableIf: "{% if node.isMultisource %} true {% else %} false {% endif %}"
      templates:
        create:
          templateString: |
            {% if node.override.create.enabled %}
                
                {{ node.override.create.script }}

            {% else %}
                {{ stage('Create View') }}
                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}
                    SELECT {% if config.selectDistinct %} DISTINCT {% endif %}
                    {% for col in source.columns %}
                        {{ get_source_transform(col) }} AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}

                    {{ source.join }}

                    {% if not loop.last %}
                        {% if config.insertStrategy in ['UNION', 'UNION ALL'] %}
                            {{ config.insertStrategy }}
                        {% else %}
                            UNION
                        {% endif %}
                    {% endif %}
                {% endfor %}
            {% endif %}
        run:
          templateString: ""
    name: View
    version: 1
  StepType-persistentStage:
    id: persistentStage
    isDisabled: false
    metadata:
      defaultStorageLocation: STG
      error: null
      nodeMetadataSpec: |
        capitalized: Persistent Stage
        short: PSTG
        plural: Persistent Stages
        tagColor: '#29B2DB'
            
        config:
        - groupName: Options
          items:
          - type: materializationSelector
            isRequired: true
            default: table
            options:
            - table
            - view
          
          - type: businessKeyColumns
            isRequired: false

          - type: multisourceToggle
            enableIf: "{% if node.materializationType == 'table' %} true {% else %} false {% endif %}"

          - type: overrideSQLToggle
            enableIf: "{% if node.materializationType == 'view' %} true {% else %} false {% endif %}"

          - displayName: Enable Tests
            attributeName: testsEnabled
            type: toggleButton
            default: true
            
          - displayName: Pre-SQL
            attributeName: preSQL
            type: textBox
            syntax: sql
            isRequired: false

          - displayName: Post-SQL
            attributeName: postSQL
            type: textBox
            syntax: sql
            isRequired: false

        systemColumns:

        - displayName: '{{NODE_NAME}}_KEY'
          transform: ''
          dataType: NUMBER
          placement: beginning
          attributeName: isSurrogateKey

        - displayName: SYSTEM_VERSION
          transform: ''
          dataType: NUMBER
          placement: end
          attributeName: isSystemVersion

        - displayName: SYSTEM_CURRENT_FLAG
          transform: ''
          dataType: VARCHAR
          placement: end
          attributeName: isSystemCurrentFlag

        - displayName: SYSTEM_START_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemStartDate

        - displayName: SYSTEM_END_DATE
          transform: CAST('2999-12-31 00:00:00' AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemEndDate

        - displayName: SYSTEM_CREATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemCreateDate

        - displayName: SYSTEM_UPDATE_DATE
          transform: CAST(CURRENT_TIMESTAMP AS TIMESTAMP)
          dataType: TIMESTAMP
          placement: end
          attributeName: isSystemUpdateDate
      templates:
        create:
          templateString: |
            {% if node.materializationType == 'table' %}
                {{ stage('Create Persistent Stage Table') }}

                CREATE OR REPLACE TABLE {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}" {{ col.dataType }}
                        {% if col.isSurrogateKey %}
            		        identity
                        {% endif %}
                        {%- if not col.nullable %} NOT NULL
                            {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                        {% endif %}
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}


            {% elif node.materializationType == 'view' %}
                {{ stage('Create Persistent Stage View') }}

                CREATE OR REPLACE VIEW {{ ref_no_link(node.location.name, node.name) }}
                (
                    {% for col in columns %}
                        "{{ col.name }}"
                        {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                        {%- if not loop.last -%},{% endif %}
                    {% endfor %}
                )
                {%- if node.description | length > 0 %} COMMENT = '{{ node.description | escape }}'{% endif %}
                AS
                {% for source in sources %}

            		{% if not loop.last %} UNION ALL {% endif %}
            	{% endfor %}

                    {% for col in source.columns %}
                        {% if col.isSurrogateKey or col.isSystemUpdateDate or col.isSystemCreateDate %}
                            NULL
                        {% else %}
                            {{ get_source_transform(col) }}
                        {% endif %}
                        AS "{{ col.name }}"
                        {%- if not loop.last -%}, {% endif %}
                    {% endfor %}
                    {{ source.join }}

            {% endif %}
        run:
          templateString: |-

            {% set has_business_key = columns | selectattr("isBusinessKey") | list | length > 0 %}
            {% set is_type_2 = columns | selectattr("isChangeTracking") | list | length > 0 %}

                {% for test in node.tests if config.testsEnabled %}
                    {% if test.runOrder == 'Before' %}
                        {{ test_stage(test.name, test.continueOnFailure) }}
                        {{ test.templateString }}
                    {% endif %}
                {% endfor %}

            {% if node.materializationType == 'table' %}
            	{% if config.preSQL %}
            		{{ stage('Pre-SQL') }}
            		{{ config.preSQL }}
            	{% endif %}
            	
                {% if has_business_key and is_type_2 %}

                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                        /* New Rows That Don't Exist */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_INITAL_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        LEFT JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                                {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "DIM"."{{ col.name }}" IS NULL
                        {% endfor %}
                        UNION ALL
                        /* New Row Needing To Be Inserted Due To Type-2 Column Changes */
                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion %}
                                "DIM"."{{ col.name }}" + 1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                               {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor %}
                            'INSERT_NEW_VERSION_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Expired Due To Type-2 Column Changes
                        In this case, only two columns are merged (version and end date) */
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemEndDate %}
                                DATEADD(MILLISECONDS, -1, CAST(CURRENT_TIMESTAMP AS TIMESTAMP))
                            {% elif col.isSystemCurrentFlag %}
                                'N'
                            {% else %}
                                "DIM"."{{ col.name }}"
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'update_expired_version_rows' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        {% for col in source.columns if (col.isChangeTracking == true) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            ( NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**') )
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        UNION ALL
                        /* Rows Needing To Be Updated Due To Changes To Non-Type-2 source.columns
                        This case merges only when there are changes in non-type-2 column updates, but no changes in type-2 columns*/
                        SELECT
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            {% if col.isSystemVersion or col.isSystemCreateDate or col.isSystemStartDate or col.isSystemEndDate %}
                                "DIM"."{{ col.name }}"
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}",
                        {% endfor -%}
                            'UPDATE_NON_TYPE2_ROWS' AS "DML_OPERATION"
                        {{ source.join }}
                        INNER JOIN {{ ref_no_link(node.location.name, node.name) }} "DIM" ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %}
                        WHERE "DIM"."{{ get_value_by_column_attribute("isSystemCurrentFlag") }}" = 'Y'
                        AND (
                        {% for col in source.columns if (col.isChangeTracking) -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            {{ get_source_transform(col) }} = "DIM"."{{ col.name }}"
                        {% endfor %} )
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isChangeTracking or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) -%}
                            {% if loop.first %}
                                AND (
                            {% endif %}
                            {% if not loop.first %}
                                OR
                            {% endif %}
                            NVL( CAST({{ get_source_transform(col) }} as STRING), '**NULL**') <> NVL( CAST("DIM"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                    ) AS "SRC"
                    ON
                    {% for col in source.columns if col.isBusinessKey -%}
                        {% if not loop.first %}
                            AND
                        {% endif %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                    {% endfor %}
                    AND "TGT"."{{ get_value_by_column_attribute("isSystemVersion") }}" = "SRC"."{{ get_value_by_column_attribute("isSystemVersion") }}"
                    WHEN MATCHED THEN UPDATE SET
                    {%- for col in source.columns if not (col.isBusinessKey or col.isSurrogateKey or col.isSystemCreateDate) %}
                        "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    WHEN NOT MATCHED THEN INSERT (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )
                    VALUES (
                    {%- for col in source.columns if not col.isSurrogateKey %}
                        "SRC"."{{ col.name }}"
                        {% if not loop.last %}, {% endif %}
                    {% endfor -%}
                    )

                {% endfor %}

                {% elif has_business_key and not is_type_2 %}
                    {% for source in sources %}
                        {{ stage('MERGE ' + source.name | string ) }}
                        MERGE INTO {{ ref_no_link(node.location.name, node.name) }} "TGT"
                        USING (
                            SELECT
                            {% for col in source.columns if not col.isSurrogateKey %}
                                {% if col.isSystemVersion %}
                                	1
                                {% elif col.isSystemCurrentFlag %}
                                	'Y'
                                {% else %}
                                    {{ get_source_transform(col) }}
                                {% endif %}
                                AS "{{ col.name }}"
                                {%- if not loop.last %}, {% endif %}
                            {% endfor %}
                            {{ source.join }})
                            AS "SRC"
                        ON
                        {% for col in source.columns if col.isBusinessKey -%}
                            {% if not loop.first %}
                                AND
                            {% endif %}
                            "SRC"."{{ col.name }}" = "TGT"."{{ col.name }}"
                        {% endfor %}
                        WHEN MATCHED
                        {% for col in source.columns if not (   col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemUpdateDate or
                                                                col.isSystemCreateDate) %}
                            {% if loop.first %}
                                AND (
                            {% else %}
                                OR
                            {% endif %}
                            NVL( CAST("SRC"."{{ col.name }}" as STRING), '**NULL**') <> NVL( CAST("TGT"."{{ col.name }}" as STRING), '**NULL**')
                            {% if loop.last %}
                                )
                            {% endif %}
                        {% endfor %}
                        THEN UPDATE SET
                        {%- for col in source.columns if not (  col.isBusinessKey or
                                                                col.isSurrogateKey or
                                                                col.isSystemVersion or
                                                                col.isSystemCurrentFlag or
                                                                col.isSystemStartDate or
                                                                col.isSystemEndDate or
                                                                col.isSystemCreateDate) %}
                                "TGT"."{{ col.name }}" = "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor %}
                        WHEN NOT MATCHED THEN
                        INSERT (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                        VALUES (
                        {%- for col in source.columns if not col.isSurrogateKey %}
                            "SRC"."{{ col.name }}"
                            {% if not loop.last %}, {% endif %}
                        {% endfor -%}
                        )
                    {% endfor %}
                {% else %}
                    {% for source in sources %}
                        {{ stage('Insert ' + source.name | string ) }}
                        INSERT INTO {{ ref_no_link(node.location.name, node.name) }}
                        (
                            {% for col in source.columns if not col.isSurrogateKey %}
                                "{{ col.name }}"
                                {%- if not loop.last -%},{% endif %}
                            {% endfor %}
                        )

                        SELECT
                        {% for col in source.columns if not col.isSurrogateKey %}

                            {% if col.isSystemVersion %}
                                1
                            {% elif col.isSystemCurrentFlag %}
                                'Y'
                            {% else %}
                                {{ get_source_transform(col) }}
                            {% endif %}
                            AS "{{ col.name }}"
                            {%- if not loop.last -%}, {% endif %}
                            
                        {% endfor %}
                        {{ source.join }}
                    {% endfor %}            
                {% endif %}
            	
            	{% if config.postSQL %}
            		{{ stage('Post-SQL') }}
            		{{ config.postSQL }}
            	{% endif %}
            	
            {% endif %}

            {% if config.testsEnabled %}
            	{% for test in node.tests %}
            		{% if test.runOrder == 'After' %}
            			{{ test_stage(test.name, test.continueOnFailure) }}
            			{{ test.templateString }}
                    {% endif %}
            	{% endfor %}

            	{% for column in columns %}
            		{% for test in column.tests %}
            			{{ test_stage(column.name + ": " + test.name) }}
            			{{ test.templateString }}
            		{% endfor %}
            	{% endfor %}
            {% endif %}
    name: Persistent Stage
    version: 1
subgraphs:
  Subgraph-1:
    id: "1"
    name: DIM_PURCHASING_ORDER
    steps:
      - "193"
      - "165"
      - "167"
      - "172"
      - "175"
      - "179"
      - "221"
      - "222"
      - "223"
      - "224"
      - "225"
      - "226"
      - 4bc5e259-bcb2-43bb-83b8-ffddc532e3c6
  Subgraph-17:
    id: "17"
    name: DIM_FACT_ONLY
    steps:
      - "58"
      - "66"
      - "67"
      - "69"
      - "71"
      - "73"
      - "75"
      - "77"
      - "165"
      - "167"
      - "169"
      - "171"
      - "172"
      - "175"
      - "177"
      - "179"
      - "181"
      - "188"
      - "191"
      - "192"
      - "193"
      - "194"
      - "195"
      - "196"
      - "214"
      - "218"
      - "219"
      - "220"
      - "221"
      - "222"
      - "223"
      - "224"
      - "225"
      - "226"
      - "227"
      - "228"
      - "229"
      - "230"
      - "231"
      - "232"
      - "233"
      - "234"
      - "235"
      - "236"
      - "237"
      - "238"
      - "239"
      - "240"
      - "241"
      - "242"
      - "200000043"
      - 070fae3a-602f-404e-916c-fba19188c4bb
      - 100cc3c7-b800-47a0-9575-5721229fe792
      - 1c757e6c-7e7e-47c6-ae89-65c603c435b3
      - 2139b36f-e7c6-46cc-8074-b22b2946af04
      - 300331a5-167d-481f-b933-28c6f7c3be35
      - 371e1915-bb7a-4730-b5ed-1b84fa7e3baf
      - 429909d4-352f-4c44-80cc-8d0af1c4c6a2
      - 4bc5e259-bcb2-43bb-83b8-ffddc532e3c6
      - 509e30cc-207f-43d0-b0a8-1543eef07779
      - 639b81a9-9261-4b29-b225-802a26ea2fb2
      - 88574f17-b192-4deb-b81f-518e413f7e1e
      - 98f7a334-1b64-4ee4-a3af-a8ed566fc8df
      - a5a46b10-0494-4ad2-995b-6aacb26362fa
      - cf9a9d91-d7ce-43da-a4c5-9682c3919a7c
      - d37c699a-7eb3-47ac-80dc-e0087adb42aa
      - e60374d2-0371-4d1d-bf90-0cb33306682e
      - e88d1955-f895-45ff-b2fa-fcc23d49f4ad
      - f95c1b1e-2e33-4e3f-afad-064559b326d9
  Subgraph-18:
    id: "18"
    name: Sales Order Dynamic Table
    steps:
      - 8983a6e0-24aa-4dac-bdd1-05f198757aa8
      - 429909d4-352f-4c44-80cc-8d0af1c4c6a2
      - cf9a9d91-d7ce-43da-a4c5-9682c3919a7c
      - 98f7a334-1b64-4ee4-a3af-a8ed566fc8df
      - f95c1b1e-2e33-4e3f-afad-064559b326d9
      - 300331a5-167d-481f-b933-28c6f7c3be35
      - 705f8379-af42-4890-b7d8-e0ad82fc4ee3
      - 95f8a01b-5188-44fa-946a-49ded8185616
      - a50a70dd-aaa5-4d6a-ae1d-247cb5ee7c51
  Subgraph-2:
    id: "2"
    name: FCT_PURCHASING_ORDER
    steps:
      - "171"
      - "177"
      - "191"
      - "195"
      - "196"
      - "218"
      - "219"
      - "220"
      - 100cc3c7-b800-47a0-9575-5721229fe792
      - "169"
      - "227"
      - "167"
      - "226"
      - d37c699a-7eb3-47ac-80dc-e0087adb42aa
  Subgraph-3:
    id: "3"
    name: DIM_VENDOR
    steps:
      - "188"
      - "194"
      - "228"
      - a5a46b10-0494-4ad2-995b-6aacb26362fa
  Subgraph-4:
    id: "4"
    name: DIM_PURCHASING_ORGANIZATION
    steps:
      - "181"
      - "192"
      - "229"
      - 2139b36f-e7c6-46cc-8074-b22b2946af04
  Subgraph-5:
    id: "5"
    name: FCT_SALESORDER
    steps:
      - "73"
      - "75"
      - "77"
      - "230"
      - "231"
      - "232"
      - "233"
      - 88574f17-b192-4deb-b81f-518e413f7e1e
      - 639b81a9-9261-4b29-b225-802a26ea2fb2
      - 300331a5-167d-481f-b933-28c6f7c3be35
      - c8e244d4-4e08-46d6-970d-07f728ef9590
  Subgraph-6:
    id: "6"
    name: DIM_SALES_ORGANIZATION
    steps:
      - "71"
      - "234"
      - "235"
      - 509e30cc-207f-43d0-b0a8-1543eef07779
      - 1c757e6c-7e7e-47c6-ae89-65c603c435b3
  Subgraph-7:
    id: "7"
    name: DIM_REJECTION_REASON
    steps:
      - "69"
      - "236"
      - "237"
      - 371e1915-bb7a-4730-b5ed-1b84fa7e3baf
      - 429909d4-352f-4c44-80cc-8d0af1c4c6a2
  Subgraph-8:
    id: "8"
    name: DIM_PLANT
    steps:
      - "67"
      - "238"
      - 070fae3a-602f-404e-916c-fba19188c4bb
      - cf9a9d91-d7ce-43da-a4c5-9682c3919a7c
  Subgraph-9:
    id: "9"
    name: DIM_MATERIAL
    steps:
      - "66"
      - "239"
      - "240"
      - "241"
      - "242"
      - "200000047"
      - e88d1955-f895-45ff-b2fa-fcc23d49f4ad
      - e60374d2-0371-4d1d-bf90-0cb33306682e
      - 98f7a334-1b64-4ee4-a3af-a8ed566fc8df
version: 2
